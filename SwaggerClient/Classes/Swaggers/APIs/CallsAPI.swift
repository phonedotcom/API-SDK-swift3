//
// CallsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class CallsAPI: APIBase {
    /**
     Make a phone call
     
     - parameter accountId: (path) Account ID 
     - parameter data: (body) Call data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAccountCall(accountId: Int32, data: CreateCallParams? = nil, completion: @escaping ((_ data: CallFull?,_ error: Error?) -> Void)) {
        createAccountCallWithRequestBuilder(accountId: accountId, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Make a phone call
     - POST /accounts/{account_id}/calls
     - Make a phone call. See Calls for more details and how to setup caller id's. Note: This API is for users with Account Owner scope access token. Users with Extension User scope token should invoke the Calls API with the following definition: POST https://api.phone.com/v4/accounts/:account_id/extensions/:extension_id/calls
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "id" : "aeiou"
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter data: (body) Call data (optional)

     - returns: RequestBuilder<CallFull> 
     */
    open class func createAccountCallWithRequestBuilder(accountId: Int32, data: CreateCallParams? = nil) -> RequestBuilder<CallFull> {
        var path = "/accounts/{account_id}/calls"
        path = path.replacingOccurrences(of: "{account_id}", with: "\(accountId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CallFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
