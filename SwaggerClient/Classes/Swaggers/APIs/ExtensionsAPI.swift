//
// ExtensionsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class ExtensionsAPI: APIBase {
    /**
     Create an individual extension
     
     - parameter accountId: (path) Account ID 
     - parameter data: (body) Account Extensions Data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAccountExtension(accountId: Int32, data: CreateExtensionParams? = nil, completion: @escaping ((_ data: ExtensionFull?,_ error: Error?) -> Void)) {
        createAccountExtensionWithRequestBuilder(accountId: accountId, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create an individual extension
     - POST /accounts/{accountId}/extensions
     - This service shows how to create a virtual extension.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "device_membership" : {
    "line" : 123,
    "device" : {
      "name" : "aeiou",
      "id" : 123
    }
  },
  "local_area_code" : "aeiou",
  "call_notifications" : "",
  "extension" : 123,
  "voicemail" : {
    "password" : "aeiou",
    "attachments" : "aeiou",
    "transcription" : "aeiou",
    "greeting" : {
      "standard" : "",
      "enable_leave_message_prompt" : true,
      "alternate" : "",
      "type" : "aeiou"
    },
    "enabled" : true,
    "notifications" : {
      "emails" : [ "aeiou" ],
      "sms" : "aeiou"
    }
  },
  "timezone" : "aeiou",
  "include_in_directory" : true,
  "full_name" : "aeiou",
  "enable_call_waiting" : true,
  "enable_outbound_calls" : true,
  "route" : {
    "name" : "aeiou",
    "id" : 123
  },
  "name_greeting" : {
    "name" : "aeiou",
    "id" : 123
  },
  "usage_type" : "aeiou",
  "caller_id" : "aeiou",
  "name" : "aeiou",
  "id" : 123
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter data: (body) Account Extensions Data (optional)

     - returns: RequestBuilder<ExtensionFull> 
     */
    open class func createAccountExtensionWithRequestBuilder(accountId: Int32, data: CreateExtensionParams? = nil) -> RequestBuilder<ExtensionFull> {
        var path = "/accounts/{accountId}/extensions"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ExtensionFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Show details of an individual extension
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountExtension(accountId: Int32, extensionId: Int32, completion: @escaping ((_ data: ExtensionFull?,_ error: Error?) -> Void)) {
        getAccountExtensionWithRequestBuilder(accountId: accountId, extensionId: extensionId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Show details of an individual extension
     - GET /accounts/{accountId}/extensions/{extensionId}
     - This service shows the details of an individual Extension.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "device_membership" : {
    "line" : 123,
    "device" : {
      "name" : "aeiou",
      "id" : 123
    }
  },
  "local_area_code" : "aeiou",
  "call_notifications" : "",
  "extension" : 123,
  "voicemail" : {
    "password" : "aeiou",
    "attachments" : "aeiou",
    "transcription" : "aeiou",
    "greeting" : {
      "standard" : "",
      "enable_leave_message_prompt" : true,
      "alternate" : "",
      "type" : "aeiou"
    },
    "enabled" : true,
    "notifications" : {
      "emails" : [ "aeiou" ],
      "sms" : "aeiou"
    }
  },
  "timezone" : "aeiou",
  "include_in_directory" : true,
  "full_name" : "aeiou",
  "enable_call_waiting" : true,
  "enable_outbound_calls" : true,
  "route" : {
    "name" : "aeiou",
    "id" : 123
  },
  "name_greeting" : {
    "name" : "aeiou",
    "id" : 123
  },
  "usage_type" : "aeiou",
  "caller_id" : "aeiou",
  "name" : "aeiou",
  "id" : 123
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 

     - returns: RequestBuilder<ExtensionFull> 
     */
    open class func getAccountExtensionWithRequestBuilder(accountId: Int32, extensionId: Int32) -> RequestBuilder<ExtensionFull> {
        var path = "/accounts/{accountId}/extensions/{extensionId}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{extensionId}", with: "\(extensionId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ExtensionFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a list of extensions visible to the authenticated user or client
     
     - parameter accountId: (path) Account ID 
     - parameter filtersId: (query) ID filter (optional)
     - parameter filtersExtension: (query) Extension filter (optional)
     - parameter filtersName: (query) Name filter (optional)
     - parameter sortId: (query) ID sorting (optional)
     - parameter sortExtension: (query) Extension sorting (optional)
     - parameter sortName: (query) Name sorting (optional)
     - parameter limit: (query) Max results (optional)
     - parameter offset: (query) Results to skip (optional)
     - parameter fields: (query) Field set (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAccountExtensions(accountId: Int32, filtersId: [String]? = nil, filtersExtension: [String]? = nil, filtersName: [String]? = nil, sortId: String? = nil, sortExtension: String? = nil, sortName: String? = nil, limit: Int32? = nil, offset: Int32? = nil, fields: String? = nil, completion: @escaping ((_ data: ListExtensions?,_ error: Error?) -> Void)) {
        listAccountExtensionsWithRequestBuilder(accountId: accountId, filtersId: filtersId, filtersExtension: filtersExtension, filtersName: filtersName, sortId: sortId, sortExtension: sortExtension, sortName: sortName, limit: limit, offset: offset, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a list of extensions visible to the authenticated user or client
     - GET /accounts/{accountId}/extensions
     - This service lists the visible extensions on a given account.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "offset" : 123,
  "limit" : 123,
  "filters" : {
    "extension" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "sort" : {
    "extension" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "items" : [ {
    "device_membership" : {
      "line" : 123,
      "device" : {
        "name" : "aeiou",
        "id" : 123
      }
    },
    "local_area_code" : "aeiou",
    "call_notifications" : "",
    "extension" : 123,
    "voicemail" : {
      "password" : "aeiou",
      "attachments" : "aeiou",
      "transcription" : "aeiou",
      "greeting" : {
        "standard" : "",
        "enable_leave_message_prompt" : true,
        "alternate" : "",
        "type" : "aeiou"
      },
      "enabled" : true,
      "notifications" : {
        "emails" : [ "aeiou" ],
        "sms" : "aeiou"
      }
    },
    "timezone" : "aeiou",
    "include_in_directory" : true,
    "full_name" : "aeiou",
    "enable_call_waiting" : true,
    "enable_outbound_calls" : true,
    "route" : {
      "name" : "aeiou",
      "id" : 123
    },
    "name_greeting" : {
      "name" : "aeiou",
      "id" : 123
    },
    "usage_type" : "aeiou",
    "caller_id" : "aeiou",
    "name" : "aeiou",
    "id" : 123
  } ]
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter filtersId: (query) ID filter (optional)
     - parameter filtersExtension: (query) Extension filter (optional)
     - parameter filtersName: (query) Name filter (optional)
     - parameter sortId: (query) ID sorting (optional)
     - parameter sortExtension: (query) Extension sorting (optional)
     - parameter sortName: (query) Name sorting (optional)
     - parameter limit: (query) Max results (optional)
     - parameter offset: (query) Results to skip (optional)
     - parameter fields: (query) Field set (optional)

     - returns: RequestBuilder<ListExtensions> 
     */
    open class func listAccountExtensionsWithRequestBuilder(accountId: Int32, filtersId: [String]? = nil, filtersExtension: [String]? = nil, filtersName: [String]? = nil, sortId: String? = nil, sortExtension: String? = nil, sortName: String? = nil, limit: Int32? = nil, offset: Int32? = nil, fields: String? = nil) -> RequestBuilder<ListExtensions> {
        var path = "/accounts/{accountId}/extensions"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filters[id]": filtersId, 
            "filters[extension]": filtersExtension, 
            "filters[name]": filtersName, 
            "sort[id]": sortId, 
            "sort[extension]": sortExtension, 
            "sort[name]": sortName, 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "fields": fields
        ])
        

        let requestBuilder: RequestBuilder<ListExtensions>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Replace an individual extension
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter data: (body) Account Extensions Data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replaceAccountExtension(accountId: Int32, extensionId: Int32, data: ReplaceExtensionParams? = nil, completion: @escaping ((_ data: ExtensionFull?,_ error: Error?) -> Void)) {
        replaceAccountExtensionWithRequestBuilder(accountId: accountId, extensionId: extensionId, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Replace an individual extension
     - PUT /accounts/{accountId}/extensions/{extensionId}
     - This service shows how to update an individual extension.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "device_membership" : {
    "line" : 123,
    "device" : {
      "name" : "aeiou",
      "id" : 123
    }
  },
  "local_area_code" : "aeiou",
  "call_notifications" : "",
  "extension" : 123,
  "voicemail" : {
    "password" : "aeiou",
    "attachments" : "aeiou",
    "transcription" : "aeiou",
    "greeting" : {
      "standard" : "",
      "enable_leave_message_prompt" : true,
      "alternate" : "",
      "type" : "aeiou"
    },
    "enabled" : true,
    "notifications" : {
      "emails" : [ "aeiou" ],
      "sms" : "aeiou"
    }
  },
  "timezone" : "aeiou",
  "include_in_directory" : true,
  "full_name" : "aeiou",
  "enable_call_waiting" : true,
  "enable_outbound_calls" : true,
  "route" : {
    "name" : "aeiou",
    "id" : 123
  },
  "name_greeting" : {
    "name" : "aeiou",
    "id" : 123
  },
  "usage_type" : "aeiou",
  "caller_id" : "aeiou",
  "name" : "aeiou",
  "id" : 123
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter data: (body) Account Extensions Data (optional)

     - returns: RequestBuilder<ExtensionFull> 
     */
    open class func replaceAccountExtensionWithRequestBuilder(accountId: Int32, extensionId: Int32, data: ReplaceExtensionParams? = nil) -> RequestBuilder<ExtensionFull> {
        var path = "/accounts/{accountId}/extensions/{extensionId}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{extensionId}", with: "\(extensionId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ExtensionFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
