//
// ContactsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class ContactsAPI: APIBase {
    /**
     Add a new address book contact for an extension
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter data: (body) Contact data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAccountExtensionContact(accountId: Int32, extensionId: Int32, data: CreateContactParams? = nil, completion: @escaping ((_ data: ContactFull?,_ error: Error?) -> Void)) {
        createAccountExtensionContactWithRequestBuilder(accountId: accountId, extensionId: extensionId, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Add a new address book contact for an extension
     - POST /accounts/{accountId}/extensions/{extensionId}/contacts
     - For more on the input fields, see Account Contacts.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "addresses" : [ {
    "zip" : "aeiou",
    "country" : "aeiou",
    "city" : "aeiou",
    "street" : "aeiou",
    "state" : "aeiou",
    "type" : "aeiou"
  } ],
  "prefix" : "aeiou",
  "last_name" : "aeiou",
  "created_at" : 123,
  "middle_name" : "aeiou",
  "suffix" : "aeiou",
  "emails" : [ {
    "type" : "aeiou",
    "email" : "aeiou"
  } ],
  "phone_numbers" : [ {
    "number" : "aeiou",
    "normalized" : "aeiou",
    "type" : "aeiou"
  } ],
  "phonetic_first_name" : "aeiou",
  "phonetic_middle_name" : "aeiou",
  "updated_at" : 123,
  "nickname" : "aeiou",
  "company" : "aeiou",
  "id" : 123,
  "department" : "aeiou",
  "first_name" : "aeiou",
  "phonetic_last_name" : "aeiou",
  "job_title" : "aeiou",
  "group" : {
    "name" : "aeiou",
    "id" : 123
  }
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter data: (body) Contact data (optional)

     - returns: RequestBuilder<ContactFull> 
     */
    open class func createAccountExtensionContactWithRequestBuilder(accountId: Int32, extensionId: Int32, data: CreateContactParams? = nil) -> RequestBuilder<ContactFull> {
        var path = "/accounts/{accountId}/extensions/{extensionId}/contacts"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{extensionId}", with: "\(extensionId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ContactFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter contactId: (path) Contact ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAccountExtensionContact(accountId: Int32, extensionId: Int32, contactId: Int32, completion: @escaping ((_ data: DeleteContact?,_ error: Error?) -> Void)) {
        deleteAccountExtensionContactWithRequestBuilder(accountId: accountId, extensionId: extensionId, contactId: contactId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     
     - DELETE /accounts/{accountId}/extensions/{extensionId}/contacts/{contactId}
     - 
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "success" : true
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter contactId: (path) Contact ID 

     - returns: RequestBuilder<DeleteContact> 
     */
    open class func deleteAccountExtensionContactWithRequestBuilder(accountId: Int32, extensionId: Int32, contactId: Int32) -> RequestBuilder<DeleteContact> {
        var path = "/accounts/{accountId}/extensions/{extensionId}/contacts/{contactId}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{extensionId}", with: "\(extensionId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{contactId}", with: "\(contactId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DeleteContact>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve the details of an address book contact
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter contactId: (path) Contact ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountExtensionContact(accountId: Int32, extensionId: Int32, contactId: Int32, completion: @escaping ((_ data: ContactFull?,_ error: Error?) -> Void)) {
        getAccountExtensionContactWithRequestBuilder(accountId: accountId, extensionId: extensionId, contactId: contactId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Retrieve the details of an address book contact
     - GET /accounts/{accountId}/extensions/{extensionId}/contacts/{contactId}
     - For more info on the fields shown, see Account Contacts.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "addresses" : [ {
    "zip" : "aeiou",
    "country" : "aeiou",
    "city" : "aeiou",
    "street" : "aeiou",
    "state" : "aeiou",
    "type" : "aeiou"
  } ],
  "prefix" : "aeiou",
  "last_name" : "aeiou",
  "created_at" : 123,
  "middle_name" : "aeiou",
  "suffix" : "aeiou",
  "emails" : [ {
    "type" : "aeiou",
    "email" : "aeiou"
  } ],
  "phone_numbers" : [ {
    "number" : "aeiou",
    "normalized" : "aeiou",
    "type" : "aeiou"
  } ],
  "phonetic_first_name" : "aeiou",
  "phonetic_middle_name" : "aeiou",
  "updated_at" : 123,
  "nickname" : "aeiou",
  "company" : "aeiou",
  "id" : 123,
  "department" : "aeiou",
  "first_name" : "aeiou",
  "phonetic_last_name" : "aeiou",
  "job_title" : "aeiou",
  "group" : {
    "name" : "aeiou",
    "id" : 123
  }
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter contactId: (path) Contact ID 

     - returns: RequestBuilder<ContactFull> 
     */
    open class func getAccountExtensionContactWithRequestBuilder(accountId: Int32, extensionId: Int32, contactId: Int32) -> RequestBuilder<ContactFull> {
        var path = "/accounts/{accountId}/extensions/{extensionId}/contacts/{contactId}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{extensionId}", with: "\(extensionId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{contactId}", with: "\(contactId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ContactFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Show a list of address book contacts
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter filtersId: (query) ID filter (optional)
     - parameter filtersGroupId: (query) Group filter (optional)
     - parameter filtersUpdatedAt: (query) Updated At filter (optional)
     - parameter sortId: (query) ID sorting (optional)
     - parameter sortUpdatedAt: (query) Updated At sorting (optional)
     - parameter limit: (query) Max results (optional)
     - parameter offset: (query) Results to skip (optional)
     - parameter fields: (query) Field set (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAccountExtensionContacts(accountId: Int32, extensionId: Int32, filtersId: [String]? = nil, filtersGroupId: [String]? = nil, filtersUpdatedAt: [String]? = nil, sortId: String? = nil, sortUpdatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, fields: String? = nil, completion: @escaping ((_ data: ListContacts?,_ error: Error?) -> Void)) {
        listAccountExtensionContactsWithRequestBuilder(accountId: accountId, extensionId: extensionId, filtersId: filtersId, filtersGroupId: filtersGroupId, filtersUpdatedAt: filtersUpdatedAt, sortId: sortId, sortUpdatedAt: sortUpdatedAt, limit: limit, offset: offset, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Show a list of address book contacts
     - GET /accounts/{accountId}/extensions/{extensionId}/contacts
     - See Account Contacts for more info on the fields in each item.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "offset" : 123,
  "limit" : 123,
  "filters" : {
    "updated_at" : "aeiou",
    "group_id" : "aeiou",
    "id" : "aeiou"
  },
  "sort" : {
    "updated_at" : "aeiou",
    "id" : "aeiou"
  },
  "items" : [ {
    "addresses" : [ {
      "zip" : "aeiou",
      "country" : "aeiou",
      "city" : "aeiou",
      "street" : "aeiou",
      "state" : "aeiou",
      "type" : "aeiou"
    } ],
    "prefix" : "aeiou",
    "last_name" : "aeiou",
    "created_at" : 123,
    "middle_name" : "aeiou",
    "suffix" : "aeiou",
    "emails" : [ {
      "type" : "aeiou",
      "email" : "aeiou"
    } ],
    "phone_numbers" : [ {
      "number" : "aeiou",
      "normalized" : "aeiou",
      "type" : "aeiou"
    } ],
    "phonetic_first_name" : "aeiou",
    "phonetic_middle_name" : "aeiou",
    "updated_at" : 123,
    "nickname" : "aeiou",
    "company" : "aeiou",
    "id" : 123,
    "department" : "aeiou",
    "first_name" : "aeiou",
    "phonetic_last_name" : "aeiou",
    "job_title" : "aeiou",
    "group" : {
      "name" : "aeiou",
      "id" : 123
    }
  } ]
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter filtersId: (query) ID filter (optional)
     - parameter filtersGroupId: (query) Group filter (optional)
     - parameter filtersUpdatedAt: (query) Updated At filter (optional)
     - parameter sortId: (query) ID sorting (optional)
     - parameter sortUpdatedAt: (query) Updated At sorting (optional)
     - parameter limit: (query) Max results (optional)
     - parameter offset: (query) Results to skip (optional)
     - parameter fields: (query) Field set (optional)

     - returns: RequestBuilder<ListContacts> 
     */
    open class func listAccountExtensionContactsWithRequestBuilder(accountId: Int32, extensionId: Int32, filtersId: [String]? = nil, filtersGroupId: [String]? = nil, filtersUpdatedAt: [String]? = nil, sortId: String? = nil, sortUpdatedAt: String? = nil, limit: Int32? = nil, offset: Int32? = nil, fields: String? = nil) -> RequestBuilder<ListContacts> {
        var path = "/accounts/{accountId}/extensions/{extensionId}/contacts"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{extensionId}", with: "\(extensionId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filters[id]": filtersId, 
            "filters[group_id]": filtersGroupId, 
            "filters[updated_at]": filtersUpdatedAt, 
            "sort[id]": sortId, 
            "sort[updated_at]": sortUpdatedAt, 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "fields": fields
        ])
        

        let requestBuilder: RequestBuilder<ListContacts>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter contactId: (path) Contact ID 
     - parameter data: (body) Contact data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replaceAccountExtensionContact(accountId: Int32, extensionId: Int32, contactId: Int32, data: CreateContactParams? = nil, completion: @escaping ((_ data: ContactFull?,_ error: Error?) -> Void)) {
        replaceAccountExtensionContactWithRequestBuilder(accountId: accountId, extensionId: extensionId, contactId: contactId, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     
     - PUT /accounts/{accountId}/extensions/{extensionId}/contacts/{contactId}
     - For more on the input fields, see Account Contacts.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "addresses" : [ {
    "zip" : "aeiou",
    "country" : "aeiou",
    "city" : "aeiou",
    "street" : "aeiou",
    "state" : "aeiou",
    "type" : "aeiou"
  } ],
  "prefix" : "aeiou",
  "last_name" : "aeiou",
  "created_at" : 123,
  "middle_name" : "aeiou",
  "suffix" : "aeiou",
  "emails" : [ {
    "type" : "aeiou",
    "email" : "aeiou"
  } ],
  "phone_numbers" : [ {
    "number" : "aeiou",
    "normalized" : "aeiou",
    "type" : "aeiou"
  } ],
  "phonetic_first_name" : "aeiou",
  "phonetic_middle_name" : "aeiou",
  "updated_at" : 123,
  "nickname" : "aeiou",
  "company" : "aeiou",
  "id" : 123,
  "department" : "aeiou",
  "first_name" : "aeiou",
  "phonetic_last_name" : "aeiou",
  "job_title" : "aeiou",
  "group" : {
    "name" : "aeiou",
    "id" : 123
  }
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter extensionId: (path) Extension ID 
     - parameter contactId: (path) Contact ID 
     - parameter data: (body) Contact data (optional)

     - returns: RequestBuilder<ContactFull> 
     */
    open class func replaceAccountExtensionContactWithRequestBuilder(accountId: Int32, extensionId: Int32, contactId: Int32, data: CreateContactParams? = nil) -> RequestBuilder<ContactFull> {
        var path = "/accounts/{accountId}/extensions/{extensionId}/contacts/{contactId}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{extensionId}", with: "\(extensionId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{contactId}", with: "\(contactId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ContactFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
