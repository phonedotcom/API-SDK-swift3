//
// RoutesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RoutesAPI: APIBase {
    /**
     Add a new route to the account.
     
     - parameter accountId: (path) Account ID 
     - parameter data: (body) Route data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createRoute(accountId: Int32, data: CreateRouteParams? = nil, completion: @escaping ((_ data: RouteFull?,_ error: Error?) -> Void)) {
        createRouteWithRequestBuilder(accountId: accountId, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Add a new route to the account.
     - POST /accounts/{account_id}/routes
     - Add a new route to the account. See Intro to Routes for more info on the properties.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "extension" : {
    "extension" : 1,
    "name" : "aeiou",
    "id" : 6
  },
  "name" : "aeiou",
  "rules" : [ {
    "filter" : {
      "schedule" : {
        "name" : "aeiou",
        "id" : 5
      },
      "contact" : {
        "prefix" : "aeiou",
        "nickname" : "aeiou",
        "last_name" : "aeiou",
        "company" : "aeiou",
        "id" : 5,
        "middle_name" : "aeiou",
        "suffix" : "aeiou",
        "first_name" : "aeiou"
      },
      "type" : "aeiou",
      "group" : {
        "name" : "aeiou",
        "id" : 2
      }
    },
    "actions" : [ {
      "duration" : 3,
      "extension" : "",
      "hold_music" : {
        "name" : "aeiou",
        "id" : 9
      },
      "greeting" : "",
      "action" : "aeiou",
      "menu" : {
        "name" : "aeiou",
        "id" : 2
      },
      "trunk" : {
        "name" : "aeiou",
        "id" : 7
      },
      "items" : [ {
        "number" : "aeiou",
        "extension" : "",
        "screening" : false,
        "caller_id" : "calling_number",
        "voice_tag" : "aeiou",
        "distinctive_ring" : "aeiou",
        "type" : "aeiou"
      } ],
      "timeout" : 7,
      "queue" : {
        "name" : "aeiou",
        "id" : 4
      }
    } ]
  } ],
  "id" : 0
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter data: (body) Route data (optional)

     - returns: RequestBuilder<RouteFull> 
     */
    open class func createRouteWithRequestBuilder(accountId: Int32, data: CreateRouteParams? = nil) -> RequestBuilder<RouteFull> {
        var path = "/accounts/{account_id}/routes"
        path = path.replacingOccurrences(of: "{account_id}", with: "\(accountId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RouteFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a route from the account.
     
     - parameter accountId: (path) Account ID 
     - parameter routeId: (path) Route ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAccountRoute(accountId: Int32, routeId: Int32, completion: @escaping ((_ data: DeleteEntry?,_ error: Error?) -> Void)) {
        deleteAccountRouteWithRequestBuilder(accountId: accountId, routeId: routeId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete a route from the account.
     - DELETE /accounts/{account_id}/routes/{route_id}
     - Delete a route from the account. See Intro to Routes for more info on the properties.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "success" : true
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter routeId: (path) Route ID 

     - returns: RequestBuilder<DeleteEntry> 
     */
    open class func deleteAccountRouteWithRequestBuilder(accountId: Int32, routeId: Int32) -> RequestBuilder<DeleteEntry> {
        var path = "/accounts/{account_id}/routes/{route_id}"
        path = path.replacingOccurrences(of: "{account_id}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{route_id}", with: "\(routeId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DeleteEntry>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Show details of an individual route.
     
     - parameter accountId: (path) Account ID 
     - parameter routeId: (path) Route ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountRoute(accountId: Int32, routeId: Int32, completion: @escaping ((_ data: RouteFull?,_ error: Error?) -> Void)) {
        getAccountRouteWithRequestBuilder(accountId: accountId, routeId: routeId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Show details of an individual route.
     - GET /accounts/{account_id}/routes/{route_id}
     - Show details of an individual route. See Intro to Routes for more info on the properties.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "extension" : {
    "extension" : 1,
    "name" : "aeiou",
    "id" : 6
  },
  "name" : "aeiou",
  "rules" : [ {
    "filter" : {
      "schedule" : {
        "name" : "aeiou",
        "id" : 5
      },
      "contact" : {
        "prefix" : "aeiou",
        "nickname" : "aeiou",
        "last_name" : "aeiou",
        "company" : "aeiou",
        "id" : 5,
        "middle_name" : "aeiou",
        "suffix" : "aeiou",
        "first_name" : "aeiou"
      },
      "type" : "aeiou",
      "group" : {
        "name" : "aeiou",
        "id" : 2
      }
    },
    "actions" : [ {
      "duration" : 3,
      "extension" : "",
      "hold_music" : {
        "name" : "aeiou",
        "id" : 9
      },
      "greeting" : "",
      "action" : "aeiou",
      "menu" : {
        "name" : "aeiou",
        "id" : 2
      },
      "trunk" : {
        "name" : "aeiou",
        "id" : 7
      },
      "items" : [ {
        "number" : "aeiou",
        "extension" : "",
        "screening" : false,
        "caller_id" : "calling_number",
        "voice_tag" : "aeiou",
        "distinctive_ring" : "aeiou",
        "type" : "aeiou"
      } ],
      "timeout" : 7,
      "queue" : {
        "name" : "aeiou",
        "id" : 4
      }
    } ]
  } ],
  "id" : 0
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter routeId: (path) Route ID 

     - returns: RequestBuilder<RouteFull> 
     */
    open class func getAccountRouteWithRequestBuilder(accountId: Int32, routeId: Int32) -> RequestBuilder<RouteFull> {
        var path = "/accounts/{account_id}/routes/{route_id}"
        path = path.replacingOccurrences(of: "{account_id}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{route_id}", with: "\(routeId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RouteFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a list of routes for an account.
     
     - parameter accountId: (path) Account ID 
     - parameter filtersId: (query) ID filter (optional)
     - parameter filtersName: (query) Name filter (optional)
     - parameter sortId: (query) ID sorting (optional)
     - parameter sortName: (query) Name sorting (optional)
     - parameter limit: (query) Max results (optional)
     - parameter offset: (query) Results to skip (optional)
     - parameter fields: (query) Field set (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAccountRoutes(accountId: Int32, filtersId: [String]? = nil, filtersName: [String]? = nil, sortId: String? = nil, sortName: String? = nil, limit: Int32? = nil, offset: Int32? = nil, fields: String? = nil, completion: @escaping ((_ data: ListRoutes?,_ error: Error?) -> Void)) {
        listAccountRoutesWithRequestBuilder(accountId: accountId, filtersId: filtersId, filtersName: filtersName, sortId: sortId, sortName: sortName, limit: limit, offset: offset, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a list of routes for an account.
     - GET /accounts/{account_id}/routes
     - Get a list of routes for an account. See Intro to Routes for more info on the properties.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "offset" : 6,
  "limit" : 1,
  "filters" : {
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "sort" : {
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "items" : [ {
    "extension" : {
      "extension" : 2,
      "name" : "aeiou",
      "id" : 5
    },
    "name" : "aeiou",
    "rules" : [ {
      "filter" : {
        "schedule" : {
          "name" : "aeiou",
          "id" : 7
        },
        "contact" : {
          "prefix" : "aeiou",
          "nickname" : "aeiou",
          "last_name" : "aeiou",
          "company" : "aeiou",
          "id" : 9,
          "middle_name" : "aeiou",
          "suffix" : "aeiou",
          "first_name" : "aeiou"
        },
        "type" : "aeiou",
        "group" : {
          "name" : "aeiou",
          "id" : 3
        }
      },
      "actions" : [ {
        "duration" : 7,
        "extension" : "",
        "hold_music" : {
          "name" : "aeiou",
          "id" : 4
        },
        "greeting" : "",
        "action" : "aeiou",
        "menu" : {
          "name" : "aeiou",
          "id" : 1
        },
        "trunk" : {
          "name" : "aeiou",
          "id" : 1
        },
        "items" : [ {
          "number" : "aeiou",
          "extension" : "",
          "screening" : false,
          "caller_id" : "calling_number",
          "voice_tag" : "aeiou",
          "distinctive_ring" : "aeiou",
          "type" : "aeiou"
        } ],
        "timeout" : 2,
        "queue" : {
          "name" : "aeiou",
          "id" : 1
        }
      } ]
    } ],
    "id" : 5
  } ]
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter filtersId: (query) ID filter (optional)
     - parameter filtersName: (query) Name filter (optional)
     - parameter sortId: (query) ID sorting (optional)
     - parameter sortName: (query) Name sorting (optional)
     - parameter limit: (query) Max results (optional)
     - parameter offset: (query) Results to skip (optional)
     - parameter fields: (query) Field set (optional)

     - returns: RequestBuilder<ListRoutes> 
     */
    open class func listAccountRoutesWithRequestBuilder(accountId: Int32, filtersId: [String]? = nil, filtersName: [String]? = nil, sortId: String? = nil, sortName: String? = nil, limit: Int32? = nil, offset: Int32? = nil, fields: String? = nil) -> RequestBuilder<ListRoutes> {
        var path = "/accounts/{account_id}/routes"
        path = path.replacingOccurrences(of: "{account_id}", with: "\(accountId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filters[id]": filtersId, 
            "filters[name]": filtersName, 
            "sort[id]": sortId, 
            "sort[name]": sortName, 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "fields": fields
        ])
        

        let requestBuilder: RequestBuilder<ListRoutes>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update the information of a route.
     
     - parameter accountId: (path) Account ID 
     - parameter routeId: (path) Route ID 
     - parameter data: (body) Route data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replaceAccountRoute(accountId: Int32, routeId: Int32, data: CreateRouteParams? = nil, completion: @escaping ((_ data: RouteFull?,_ error: Error?) -> Void)) {
        replaceAccountRouteWithRequestBuilder(accountId: accountId, routeId: routeId, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update the information of a route.
     - PUT /accounts/{account_id}/routes/{route_id}
     - Update the information of a route. See Intro to Routes for more info on the properties.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "extension" : {
    "extension" : 1,
    "name" : "aeiou",
    "id" : 6
  },
  "name" : "aeiou",
  "rules" : [ {
    "filter" : {
      "schedule" : {
        "name" : "aeiou",
        "id" : 5
      },
      "contact" : {
        "prefix" : "aeiou",
        "nickname" : "aeiou",
        "last_name" : "aeiou",
        "company" : "aeiou",
        "id" : 5,
        "middle_name" : "aeiou",
        "suffix" : "aeiou",
        "first_name" : "aeiou"
      },
      "type" : "aeiou",
      "group" : {
        "name" : "aeiou",
        "id" : 2
      }
    },
    "actions" : [ {
      "duration" : 3,
      "extension" : "",
      "hold_music" : {
        "name" : "aeiou",
        "id" : 9
      },
      "greeting" : "",
      "action" : "aeiou",
      "menu" : {
        "name" : "aeiou",
        "id" : 2
      },
      "trunk" : {
        "name" : "aeiou",
        "id" : 7
      },
      "items" : [ {
        "number" : "aeiou",
        "extension" : "",
        "screening" : false,
        "caller_id" : "calling_number",
        "voice_tag" : "aeiou",
        "distinctive_ring" : "aeiou",
        "type" : "aeiou"
      } ],
      "timeout" : 7,
      "queue" : {
        "name" : "aeiou",
        "id" : 4
      }
    } ]
  } ],
  "id" : 0
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter routeId: (path) Route ID 
     - parameter data: (body) Route data (optional)

     - returns: RequestBuilder<RouteFull> 
     */
    open class func replaceAccountRouteWithRequestBuilder(accountId: Int32, routeId: Int32, data: CreateRouteParams? = nil) -> RequestBuilder<RouteFull> {
        var path = "/accounts/{account_id}/routes/{route_id}"
        path = path.replacingOccurrences(of: "{account_id}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{route_id}", with: "\(routeId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RouteFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
