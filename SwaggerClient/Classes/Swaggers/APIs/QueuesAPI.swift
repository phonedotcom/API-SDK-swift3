//
// QueuesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class QueuesAPI: APIBase {
    /**
     Create a queue
     
     - parameter accountId: (path) Account ID 
     - parameter data: (body) Queue data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAccountQueue(accountId: Int32, data: CreateQueueParams? = nil, completion: @escaping ((_ data: QueueFull?,_ error: Error?) -> Void)) {
        createAccountQueueWithRequestBuilder(accountId: accountId, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create a queue
     - POST /accounts/{accountId}/queues
     - For more on the input fields, see Account Queues.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "caller_id_type" : "aeiou",
  "hold_music" : {
    "name" : "aeiou",
    "id" : 123
  },
  "max_hold_time" : 123,
  "greeting" : {
    "name" : "aeiou",
    "id" : 123
  },
  "members" : [ {
    "extension" : {
      "extension" : 123,
      "name" : "aeiou",
      "id" : 123
    },
    "phone_number" : "aeiou"
  } ],
  "name" : "aeiou",
  "ring_time" : 123,
  "id" : 123
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter data: (body) Queue data (optional)

     - returns: RequestBuilder<QueueFull> 
     */
    open class func createAccountQueueWithRequestBuilder(accountId: Int32, data: CreateQueueParams? = nil) -> RequestBuilder<QueueFull> {
        var path = "/accounts/{accountId}/queues"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<QueueFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a queue
     
     - parameter accountId: (path) Account ID 
     - parameter queueId: (path) Queue ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAccountQueue(accountId: Int32, queueId: Int32, completion: @escaping ((_ data: DeleteQueue?,_ error: Error?) -> Void)) {
        deleteAccountQueueWithRequestBuilder(accountId: accountId, queueId: queueId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Delete a queue
     - DELETE /accounts/{accountId}/queues/{queueId}
     - This service a queue from the account. For more information on queue properties, see Account Queues.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "success" : true
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter queueId: (path) Queue ID 

     - returns: RequestBuilder<DeleteQueue> 
     */
    open class func deleteAccountQueueWithRequestBuilder(accountId: Int32, queueId: Int32) -> RequestBuilder<DeleteQueue> {
        var path = "/accounts/{accountId}/queues/{queueId}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{queueId}", with: "\(queueId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<DeleteQueue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Show details of an individual queue
     
     - parameter accountId: (path) Account ID 
     - parameter queueId: (path) Queue ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccountQueue(accountId: Int32, queueId: Int32, completion: @escaping ((_ data: QueueFull?,_ error: Error?) -> Void)) {
        getAccountQueueWithRequestBuilder(accountId: accountId, queueId: queueId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Show details of an individual queue
     - GET /accounts/{accountId}/queues/{queueId}
     - This service shows the details of an individual queue. For more on the input fields, see Account Queues.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "caller_id_type" : "aeiou",
  "hold_music" : {
    "name" : "aeiou",
    "id" : 123
  },
  "max_hold_time" : 123,
  "greeting" : {
    "name" : "aeiou",
    "id" : 123
  },
  "members" : [ {
    "extension" : {
      "extension" : 123,
      "name" : "aeiou",
      "id" : 123
    },
    "phone_number" : "aeiou"
  } ],
  "name" : "aeiou",
  "ring_time" : 123,
  "id" : 123
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter queueId: (path) Queue ID 

     - returns: RequestBuilder<QueueFull> 
     */
    open class func getAccountQueueWithRequestBuilder(accountId: Int32, queueId: Int32) -> RequestBuilder<QueueFull> {
        var path = "/accounts/{accountId}/queues/{queueId}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{queueId}", with: "\(queueId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<QueueFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a list of queues for an account
     
     - parameter accountId: (path) Account ID 
     - parameter filtersId: (query) ID filter (optional)
     - parameter filtersName: (query) Name filter (optional)
     - parameter sortId: (query) ID sorting (optional)
     - parameter sortName: (query) Name sorting (optional)
     - parameter limit: (query) Max results (optional)
     - parameter offset: (query) Results to skip (optional)
     - parameter fields: (query) Field set (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAccountQueues(accountId: Int32, filtersId: [String]? = nil, filtersName: [String]? = nil, sortId: String? = nil, sortName: String? = nil, limit: Int32? = nil, offset: Int32? = nil, fields: String? = nil, completion: @escaping ((_ data: ListQueues?,_ error: Error?) -> Void)) {
        listAccountQueuesWithRequestBuilder(accountId: accountId, filtersId: filtersId, filtersName: filtersName, sortId: sortId, sortName: sortName, limit: limit, offset: offset, fields: fields).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get a list of queues for an account
     - GET /accounts/{accountId}/queues
     - The List Queues service lists all the queues belong to the account. See Account Queues for more info on the properties.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "total" : 123,
  "offset" : 123,
  "limit" : 123,
  "filters" : {
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "sort" : {
    "name" : "aeiou",
    "id" : "aeiou"
  },
  "items" : [ {
    "caller_id_type" : "aeiou",
    "hold_music" : {
      "name" : "aeiou",
      "id" : 123
    },
    "max_hold_time" : 123,
    "greeting" : {
      "name" : "aeiou",
      "id" : 123
    },
    "members" : [ {
      "extension" : {
        "extension" : 123,
        "name" : "aeiou",
        "id" : 123
      },
      "phone_number" : "aeiou"
    } ],
    "name" : "aeiou",
    "ring_time" : 123,
    "id" : 123
  } ]
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter filtersId: (query) ID filter (optional)
     - parameter filtersName: (query) Name filter (optional)
     - parameter sortId: (query) ID sorting (optional)
     - parameter sortName: (query) Name sorting (optional)
     - parameter limit: (query) Max results (optional)
     - parameter offset: (query) Results to skip (optional)
     - parameter fields: (query) Field set (optional)

     - returns: RequestBuilder<ListQueues> 
     */
    open class func listAccountQueuesWithRequestBuilder(accountId: Int32, filtersId: [String]? = nil, filtersName: [String]? = nil, sortId: String? = nil, sortName: String? = nil, limit: Int32? = nil, offset: Int32? = nil, fields: String? = nil) -> RequestBuilder<ListQueues> {
        var path = "/accounts/{accountId}/queues"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "filters[id]": filtersId, 
            "filters[name]": filtersName, 
            "sort[id]": sortId, 
            "sort[name]": sortName, 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "fields": fields
        ])
        

        let requestBuilder: RequestBuilder<ListQueues>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Replace a queue
     
     - parameter accountId: (path) Account ID 
     - parameter queueId: (path) Queue ID 
     - parameter data: (body) Queue data (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replaceAccountQueue(accountId: Int32, queueId: Int32, data: CreateQueueParams? = nil, completion: @escaping ((_ data: QueueFull?,_ error: Error?) -> Void)) {
        replaceAccountQueueWithRequestBuilder(accountId: accountId, queueId: queueId, data: data).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Replace a queue
     - PUT /accounts/{accountId}/queues/{queueId}
     - The Replace Queue service replaces the parameters of a queue. For more on the input fields, see Account Queues.
     - API Key:
       - type: apiKey Authorization 
       - name: apiKey
     - examples: [{contentType=application/json, example={
  "caller_id_type" : "aeiou",
  "hold_music" : {
    "name" : "aeiou",
    "id" : 123
  },
  "max_hold_time" : 123,
  "greeting" : {
    "name" : "aeiou",
    "id" : 123
  },
  "members" : [ {
    "extension" : {
      "extension" : 123,
      "name" : "aeiou",
      "id" : 123
    },
    "phone_number" : "aeiou"
  } ],
  "name" : "aeiou",
  "ring_time" : 123,
  "id" : 123
}}]
     
     - parameter accountId: (path) Account ID 
     - parameter queueId: (path) Queue ID 
     - parameter data: (body) Queue data (optional)

     - returns: RequestBuilder<QueueFull> 
     */
    open class func replaceAccountQueueWithRequestBuilder(accountId: Int32, queueId: Int32, data: CreateQueueParams? = nil) -> RequestBuilder<QueueFull> {
        var path = "/accounts/{accountId}/queues/{queueId}"
        path = path.replacingOccurrences(of: "{accountId}", with: "\(accountId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{queueId}", with: "\(queueId)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = data?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<QueueFull>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
