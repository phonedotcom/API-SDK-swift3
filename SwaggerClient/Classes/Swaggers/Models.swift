// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [AccountFull]
        Decoders.addDecoder(clazz: [AccountFull].self) { (source: AnyObject) -> [AccountFull] in
            return Decoders.decode(clazz: [AccountFull].self, source: source)
        }
        // Decoder for AccountFull
        Decoders.addDecoder(clazz: AccountFull.self) { (source: AnyObject) -> AccountFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AccountFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            instance.masterAccount = Decoders.decodeOptional(clazz: AccountSummary.self, source: sourceDictionary["master_account"] as AnyObject?)
            instance.contact = Decoders.decodeOptional(clazz: ContactAccount.self, source: sourceDictionary["contact"] as AnyObject?)
            instance.billingContact = Decoders.decodeOptional(clazz: ContactAccount.self, source: sourceDictionary["billing_contact"] as AnyObject?)
            return instance
        }


        // Decoder for [AccountSummary]
        Decoders.addDecoder(clazz: [AccountSummary].self) { (source: AnyObject) -> [AccountSummary] in
            return Decoders.decode(clazz: [AccountSummary].self, source: source)
        }
        // Decoder for AccountSummary
        Decoders.addDecoder(clazz: AccountSummary.self) { (source: AnyObject) -> AccountSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AccountSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [Address]
        Decoders.addDecoder(clazz: [Address].self) { (source: AnyObject) -> [Address] in
            return Decoders.decode(clazz: [Address].self, source: source)
        }
        // Decoder for Address
        Decoders.addDecoder(clazz: Address.self) { (source: AnyObject) -> Address in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Address()
            instance.line1 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line_1"] as AnyObject?)
            instance.line2 = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line_2"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.province = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province"] as AnyObject?)
            instance.postalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postal_code"] as AnyObject?)
            instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            return instance
        }


        // Decoder for [AddressListContacts]
        Decoders.addDecoder(clazz: [AddressListContacts].self) { (source: AnyObject) -> [AddressListContacts] in
            return Decoders.decode(clazz: [AddressListContacts].self, source: source)
        }
        // Decoder for AddressListContacts
        Decoders.addDecoder(clazz: AddressListContacts.self) { (source: AnyObject) -> AddressListContacts in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AddressListContacts()
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?)
            instance.zip = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["zip"] as AnyObject?)
            instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            return instance
        }


        // Decoder for [ApplicationFull]
        Decoders.addDecoder(clazz: [ApplicationFull].self) { (source: AnyObject) -> [ApplicationFull] in
            return Decoders.decode(clazz: [ApplicationFull].self, source: source)
        }
        // Decoder for ApplicationFull
        Decoders.addDecoder(clazz: ApplicationFull.self) { (source: AnyObject) -> ApplicationFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ApplicationFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [ApplicationSummary]
        Decoders.addDecoder(clazz: [ApplicationSummary].self) { (source: AnyObject) -> [ApplicationSummary] in
            return Decoders.decode(clazz: [ApplicationSummary].self, source: source)
        }
        // Decoder for ApplicationSummary
        Decoders.addDecoder(clazz: ApplicationSummary.self) { (source: AnyObject) -> ApplicationSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ApplicationSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [AvailableNumbersFull]
        Decoders.addDecoder(clazz: [AvailableNumbersFull].self) { (source: AnyObject) -> [AvailableNumbersFull] in
            return Decoders.decode(clazz: [AvailableNumbersFull].self, source: source)
        }
        // Decoder for AvailableNumbersFull
        Decoders.addDecoder(clazz: AvailableNumbersFull.self) { (source: AnyObject) -> AvailableNumbersFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = AvailableNumbersFull()
            instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            instance.formatted = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["formatted"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["price"] as AnyObject?)
            instance.isTollFree = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_toll_free"] as AnyObject?)
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            instance.npa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["npa"] as AnyObject?)
            instance.nxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nxx"] as AnyObject?)
            instance.xxxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["xxxx"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.province = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province"] as AnyObject?)
            instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            return instance
        }


        // Decoder for [CallDetails]
        Decoders.addDecoder(clazz: [CallDetails].self) { (source: AnyObject) -> [CallDetails] in
            return Decoders.decode(clazz: [CallDetails].self, source: source)
        }
        // Decoder for CallDetails
        Decoders.addDecoder(clazz: CallDetails.self) { (source: AnyObject) -> CallDetails in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CallDetails()
            instance.startTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["start_time"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.idValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id_value"] as AnyObject?)
            instance.voipId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["voip_id"] as AnyObject?)
            instance.voipPhoneId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["voip_phone_id"] as AnyObject?)
            return instance
        }


        // Decoder for [CallFull]
        Decoders.addDecoder(clazz: [CallFull].self) { (source: AnyObject) -> [CallFull] in
            return Decoders.decode(clazz: [CallFull].self, source: source)
        }
        // Decoder for CallFull
        Decoders.addDecoder(clazz: CallFull.self) { (source: AnyObject) -> CallFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CallFull()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return instance
        }


        // Decoder for [CallLogFull]
        Decoders.addDecoder(clazz: [CallLogFull].self) { (source: AnyObject) -> [CallLogFull] in
            return Decoders.decode(clazz: [CallLogFull].self, source: source)
        }
        // Decoder for CallLogFull
        Decoders.addDecoder(clazz: CallLogFull.self) { (source: AnyObject) -> CallLogFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CallLogFull()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.uuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uuid"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"] as AnyObject?)
            instance.calledNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["called_number"] as AnyObject?)
            instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_time"] as AnyObject?)
            instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_at"] as AnyObject?)
            instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.callDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["call_duration"] as AnyObject?)
            instance.isMonitored = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_monitored"] as AnyObject?)
            instance.callNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_number"] as AnyObject?)
            instance.finalAction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["final_action"] as AnyObject?)
            instance.callRecording = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_recording"] as AnyObject?)
            instance.details = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["details"] as AnyObject?)
            instance.callerCnam = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_cnam"] as AnyObject?)
            return instance
        }


        // Decoder for [CallNotifications]
        Decoders.addDecoder(clazz: [CallNotifications].self) { (source: AnyObject) -> [CallNotifications] in
            return Decoders.decode(clazz: [CallNotifications].self, source: source)
        }
        // Decoder for CallNotifications
        Decoders.addDecoder(clazz: CallNotifications.self) { (source: AnyObject) -> CallNotifications in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CallNotifications()
            instance.emails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["emails"] as AnyObject?)
            instance.sms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sms"] as AnyObject?)
            return instance
        }


        // Decoder for [CallerIdFull]
        Decoders.addDecoder(clazz: [CallerIdFull].self) { (source: AnyObject) -> [CallerIdFull] in
            return Decoders.decode(clazz: [CallerIdFull].self, source: source)
        }
        // Decoder for CallerIdFull
        Decoders.addDecoder(clazz: CallerIdFull.self) { (source: AnyObject) -> CallerIdFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CallerIdFull()
            instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [CallerIdPhoneNumber]
        Decoders.addDecoder(clazz: [CallerIdPhoneNumber].self) { (source: AnyObject) -> [CallerIdPhoneNumber] in
            return Decoders.decode(clazz: [CallerIdPhoneNumber].self, source: source)
        }
        // Decoder for CallerIdPhoneNumber
        Decoders.addDecoder(clazz: CallerIdPhoneNumber.self) { (source: AnyObject) -> CallerIdPhoneNumber in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CallerIdPhoneNumber()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [ContactAccount]
        Decoders.addDecoder(clazz: [ContactAccount].self) { (source: AnyObject) -> [ContactAccount] in
            return Decoders.decode(clazz: [ContactAccount].self, source: source)
        }
        // Decoder for ContactAccount
        Decoders.addDecoder(clazz: ContactAccount.self) { (source: AnyObject) -> ContactAccount in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ContactAccount()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"] as AnyObject?)
            instance.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"] as AnyObject?)
            instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"] as AnyObject?)
            instance.fax = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fax"] as AnyObject?)
            instance.primaryEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_email"] as AnyObject?)
            instance.alternateEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alternate_email"] as AnyObject?)
            return instance
        }


        // Decoder for [ContactFull]
        Decoders.addDecoder(clazz: [ContactFull].self) { (source: AnyObject) -> [ContactFull] in
            return Decoders.decode(clazz: [ContactFull].self, source: source)
        }
        // Decoder for ContactFull
        Decoders.addDecoder(clazz: ContactFull.self) { (source: AnyObject) -> ContactFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ContactFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance._prefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prefix"] as AnyObject?)
            instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            instance.middleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["middle_name"] as AnyObject?)
            instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            instance.suffix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suffix"] as AnyObject?)
            instance.nickname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nickname"] as AnyObject?)
            instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"] as AnyObject?)
            instance.phoneticFirstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_first_name"] as AnyObject?)
            instance.phoneticMiddleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_middle_name"] as AnyObject?)
            instance.phoneticLastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_last_name"] as AnyObject?)
            instance.department = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["department"] as AnyObject?)
            instance.jobTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["job_title"] as AnyObject?)
            instance.emails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["emails"] as AnyObject?)
            instance.phoneNumbers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phone_numbers"] as AnyObject?)
            instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"] as AnyObject?)
            instance.group = Decoders.decodeOptional(clazz: GroupListContacts.self, source: sourceDictionary["group"] as AnyObject?)
            instance.createdAt = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["created_at"] as AnyObject?)
            instance.updatedAt = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["updated_at"] as AnyObject?)
            return instance
        }


        // Decoder for [ContactSubaccount]
        Decoders.addDecoder(clazz: [ContactSubaccount].self) { (source: AnyObject) -> [ContactSubaccount] in
            return Decoders.decode(clazz: [ContactSubaccount].self, source: source)
        }
        // Decoder for ContactSubaccount
        Decoders.addDecoder(clazz: ContactSubaccount.self) { (source: AnyObject) -> ContactSubaccount in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ContactSubaccount()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.address = Decoders.decodeOptional(clazz: Address.self, source: sourceDictionary["address"] as AnyObject?)
            instance.primaryEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["primary_email"] as AnyObject?)
            instance.alternateEmail = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["alternate_email"] as AnyObject?)
            instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"] as AnyObject?)
            instance.phone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone"] as AnyObject?)
            instance.fax = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fax"] as AnyObject?)
            return instance
        }


        // Decoder for [ContactSummary]
        Decoders.addDecoder(clazz: [ContactSummary].self) { (source: AnyObject) -> [ContactSummary] in
            return Decoders.decode(clazz: [ContactSummary].self, source: source)
        }
        // Decoder for ContactSummary
        Decoders.addDecoder(clazz: ContactSummary.self) { (source: AnyObject) -> ContactSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ContactSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance._prefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prefix"] as AnyObject?)
            instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            instance.middleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["middle_name"] as AnyObject?)
            instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            instance.suffix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suffix"] as AnyObject?)
            instance.nickname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nickname"] as AnyObject?)
            instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateCallParams]
        Decoders.addDecoder(clazz: [CreateCallParams].self) { (source: AnyObject) -> [CreateCallParams] in
            return Decoders.decode(clazz: [CreateCallParams].self, source: source)
        }
        // Decoder for CreateCallParams
        Decoders.addDecoder(clazz: CreateCallParams.self) { (source: AnyObject) -> CreateCallParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateCallParams()
            instance.callerPhoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_phone_number"] as AnyObject?)
            instance.callerExtension = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["caller_extension"] as AnyObject?)
            instance.callerCallerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_caller_id"] as AnyObject?)
            instance.callerPrivate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["caller_private"] as AnyObject?)
            instance.calleePhoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callee_phone_number"] as AnyObject?)
            instance.calleeExtension = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["callee_extension"] as AnyObject?)
            instance.calleeCallerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["callee_caller_id"] as AnyObject?)
            instance.calleePrivate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["callee_private"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateContactParams]
        Decoders.addDecoder(clazz: [CreateContactParams].self) { (source: AnyObject) -> [CreateContactParams] in
            return Decoders.decode(clazz: [CreateContactParams].self, source: source)
        }
        // Decoder for CreateContactParams
        Decoders.addDecoder(clazz: CreateContactParams.self) { (source: AnyObject) -> CreateContactParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateContactParams()
            instance.firstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["first_name"] as AnyObject?)
            instance.middleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["middle_name"] as AnyObject?)
            instance.lastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["last_name"] as AnyObject?)
            instance._prefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["prefix"] as AnyObject?)
            instance.phoneticFirstName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_first_name"] as AnyObject?)
            instance.phoneticMiddleName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_middle_name"] as AnyObject?)
            instance.phoneticLastName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phonetic_last_name"] as AnyObject?)
            instance.suffix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suffix"] as AnyObject?)
            instance.nickname = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nickname"] as AnyObject?)
            instance.company = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["company"] as AnyObject?)
            instance.department = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["department"] as AnyObject?)
            instance.jobTitle = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["job_title"] as AnyObject?)
            instance.emails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["emails"] as AnyObject?)
            instance.phoneNumbers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["phone_numbers"] as AnyObject?)
            instance.addresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["addresses"] as AnyObject?)
            instance.group = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["group"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateDeviceParams]
        Decoders.addDecoder(clazz: [CreateDeviceParams].self) { (source: AnyObject) -> [CreateDeviceParams] in
            return Decoders.decode(clazz: [CreateDeviceParams].self, source: source)
        }
        // Decoder for CreateDeviceParams
        Decoders.addDecoder(clazz: CreateDeviceParams.self) { (source: AnyObject) -> CreateDeviceParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateDeviceParams()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateExtensionParams]
        Decoders.addDecoder(clazz: [CreateExtensionParams].self) { (source: AnyObject) -> [CreateExtensionParams] in
            return Decoders.decode(clazz: [CreateExtensionParams].self, source: source)
        }
        // Decoder for CreateExtensionParams
        Decoders.addDecoder(clazz: CreateExtensionParams.self) { (source: AnyObject) -> CreateExtensionParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateExtensionParams()
            instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"] as AnyObject?)
            instance.usageType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["usage_type"] as AnyObject?)
            instance.allowsCallWaiting = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allows_call_waiting"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.includeInDirectory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["include_in_directory"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["full_name"] as AnyObject?)
            instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"] as AnyObject?)
            instance.nameGreeting = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["name_greeting"] as AnyObject?)
            instance.voicemailGreetingAlternate = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["voicemail[greeting][alternate]"] as AnyObject?)
            instance.localAreaCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["local_area_code"] as AnyObject?)
            instance.voicemailGreetingEnableLeaveMessagePrompt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["voicemail[greeting][enable_leave_message_prompt]"] as AnyObject?)
            instance.voicemailEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["voicemail[enabled]"] as AnyObject?)
            instance.enableOutboundCalls = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_outbound_calls"] as AnyObject?)
            instance.enableCallWaiting = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_call_waiting"] as AnyObject?)
            instance.voicemailPassword = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["voicemail[password]"] as AnyObject?)
            instance.voicemailGreetingType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[greeting][type]"] as AnyObject?)
            instance.voicemailGreetingStandard = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["voicemail[greeting][standard]"] as AnyObject?)
            instance.voicemailTranscription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[transcription]"] as AnyObject?)
            instance.voicemailNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["voicemail[notifications][emails]"] as AnyObject?)
            instance.voicemailNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[notifications][sms]"] as AnyObject?)
            instance.callNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["call_notifications[emails]"] as AnyObject?)
            instance.callNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_notifications[sms]"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateGroupParams]
        Decoders.addDecoder(clazz: [CreateGroupParams].self) { (source: AnyObject) -> [CreateGroupParams] in
            return Decoders.decode(clazz: [CreateGroupParams].self, source: source)
        }
        // Decoder for CreateGroupParams
        Decoders.addDecoder(clazz: CreateGroupParams.self) { (source: AnyObject) -> CreateGroupParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateGroupParams()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateMediaParams]
        Decoders.addDecoder(clazz: [CreateMediaParams].self) { (source: AnyObject) -> [CreateMediaParams] in
            return Decoders.decode(clazz: [CreateMediaParams].self, source: source)
        }
        // Decoder for CreateMediaParams
        Decoders.addDecoder(clazz: CreateMediaParams.self) { (source: AnyObject) -> CreateMediaParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateMediaParams()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.origin = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["origin"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.ttsVoice = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tts_voice"] as AnyObject?)
            instance.ttsText = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tts_text"] as AnyObject?)
            instance.isTemparary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_temparary"] as AnyObject?)
            instance.expirationDate = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expiration_date"] as AnyObject?)
            instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"] as AnyObject?)
            instance.notes = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["notes"] as AnyObject?)
            instance.randomized = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["randomized"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateMenuParams]
        Decoders.addDecoder(clazz: [CreateMenuParams].self) { (source: AnyObject) -> [CreateMenuParams] in
            return Decoders.decode(clazz: [CreateMenuParams].self, source: source)
        }
        // Decoder for CreateMenuParams
        Decoders.addDecoder(clazz: CreateMenuParams.self) { (source: AnyObject) -> CreateMenuParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateMenuParams()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.mainMessage = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["main_message"] as AnyObject?)
            instance.invalidKeypressMessage = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["invalid_keypress_message"] as AnyObject?)
            instance.allowExtensionDial = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allow_extension_dial"] as AnyObject?)
            instance.keypressWaitTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["keypress_wait_time"] as AnyObject?)
            instance.timeoutHandler = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["timeout_handler"] as AnyObject?)
            instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"] as AnyObject?)
            return instance
        }


        // Decoder for [CreatePhoneNumberParams]
        Decoders.addDecoder(clazz: [CreatePhoneNumberParams].self) { (source: AnyObject) -> [CreatePhoneNumberParams] in
            return Decoders.decode(clazz: [CreatePhoneNumberParams].self, source: source)
        }
        // Decoder for CreatePhoneNumberParams
        Decoders.addDecoder(clazz: CreatePhoneNumberParams.self) { (source: AnyObject) -> CreatePhoneNumberParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreatePhoneNumberParams()
            instance.phoneNumber = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["phone_number"] as AnyObject?)
            instance.route = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["route"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.blockIncoming = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_incoming"] as AnyObject?)
            instance.blockAnonymous = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_anonymous"] as AnyObject?)
            instance.callerIdName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id[name]"] as AnyObject?)
            instance.callerIdType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id[type]"] as AnyObject?)
            instance.smsForwardingType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sms_forwarding[type]"] as AnyObject?)
            instance.smsForwardingApplication = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["sms_forwarding[application]"] as AnyObject?)
            instance.smsForwardingExtension = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["sms_forwarding[extension]"] as AnyObject?)
            instance.callNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["call_notifications[emails]"] as AnyObject?)
            instance.callNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_notifications[sms]"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateQueueParams]
        Decoders.addDecoder(clazz: [CreateQueueParams].self) { (source: AnyObject) -> [CreateQueueParams] in
            return Decoders.decode(clazz: [CreateQueueParams].self, source: source)
        }
        // Decoder for CreateQueueParams
        Decoders.addDecoder(clazz: CreateQueueParams.self) { (source: AnyObject) -> CreateQueueParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateQueueParams()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.greeting = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["greeting"] as AnyObject?)
            instance.holdMusic = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["hold_music"] as AnyObject?)
            instance.maxHoldTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_hold_time"] as AnyObject?)
            instance.callerIdType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id_type"] as AnyObject?)
            instance.ringTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ring_time"] as AnyObject?)
            instance.members = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["members"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateRouteParams]
        Decoders.addDecoder(clazz: [CreateRouteParams].self) { (source: AnyObject) -> [CreateRouteParams] in
            return Decoders.decode(clazz: [CreateRouteParams].self, source: source)
        }
        // Decoder for CreateRouteParams
        Decoders.addDecoder(clazz: CreateRouteParams.self) { (source: AnyObject) -> CreateRouteParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateRouteParams()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.rules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rules"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["extension"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateSmsParams]
        Decoders.addDecoder(clazz: [CreateSmsParams].self) { (source: AnyObject) -> [CreateSmsParams] in
            return Decoders.decode(clazz: [CreateSmsParams].self, source: source)
        }
        // Decoder for CreateSmsParams
        Decoders.addDecoder(clazz: CreateSmsParams.self) { (source: AnyObject) -> CreateSmsParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateSmsParams()
            instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            instance.to = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to"] as AnyObject?)
            instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?)
            instance.extensionId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["extension_id"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateSubaccountParams]
        Decoders.addDecoder(clazz: [CreateSubaccountParams].self) { (source: AnyObject) -> [CreateSubaccountParams] in
            return Decoders.decode(clazz: [CreateSubaccountParams].self, source: source)
        }
        // Decoder for CreateSubaccountParams
        Decoders.addDecoder(clazz: CreateSubaccountParams.self) { (source: AnyObject) -> CreateSubaccountParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateSubaccountParams()
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            instance.contact = Decoders.decodeOptional(clazz: ContactSubaccount.self, source: sourceDictionary["contact"] as AnyObject?)
            instance.billingContact = Decoders.decodeOptional(clazz: ContactSubaccount.self, source: sourceDictionary["billing_contact"] as AnyObject?)
            return instance
        }


        // Decoder for [CreateTrunkParams]
        Decoders.addDecoder(clazz: [CreateTrunkParams].self) { (source: AnyObject) -> [CreateTrunkParams] in
            return Decoders.decode(clazz: [CreateTrunkParams].self, source: source)
        }
        // Decoder for CreateTrunkParams
        Decoders.addDecoder(clazz: CreateTrunkParams.self) { (source: AnyObject) -> CreateTrunkParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CreateTrunkParams()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?)
            instance.maxConcurrentCalls = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_concurrent_calls"] as AnyObject?)
            instance.maxMinutesPerMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_minutes_per_month"] as AnyObject?)
            instance.greeting = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["greeting"] as AnyObject?)
            instance.errorMessage = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["error_message"] as AnyObject?)
            instance.codecs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codecs"] as AnyObject?)
            return instance
        }


        // Decoder for [DeleteContact]
        Decoders.addDecoder(clazz: [DeleteContact].self) { (source: AnyObject) -> [DeleteContact] in
            return Decoders.decode(clazz: [DeleteContact].self, source: source)
        }
        // Decoder for DeleteContact
        Decoders.addDecoder(clazz: DeleteContact.self) { (source: AnyObject) -> DeleteContact in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeleteContact()
            instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"] as AnyObject?)
            return instance
        }


        // Decoder for [DeleteGroup]
        Decoders.addDecoder(clazz: [DeleteGroup].self) { (source: AnyObject) -> [DeleteGroup] in
            return Decoders.decode(clazz: [DeleteGroup].self, source: source)
        }
        // Decoder for DeleteGroup
        Decoders.addDecoder(clazz: DeleteGroup.self) { (source: AnyObject) -> DeleteGroup in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeleteGroup()
            instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"] as AnyObject?)
            return instance
        }


        // Decoder for [DeleteMenu]
        Decoders.addDecoder(clazz: [DeleteMenu].self) { (source: AnyObject) -> [DeleteMenu] in
            return Decoders.decode(clazz: [DeleteMenu].self, source: source)
        }
        // Decoder for DeleteMenu
        Decoders.addDecoder(clazz: DeleteMenu.self) { (source: AnyObject) -> DeleteMenu in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeleteMenu()
            instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"] as AnyObject?)
            return instance
        }


        // Decoder for [DeleteQueue]
        Decoders.addDecoder(clazz: [DeleteQueue].self) { (source: AnyObject) -> [DeleteQueue] in
            return Decoders.decode(clazz: [DeleteQueue].self, source: source)
        }
        // Decoder for DeleteQueue
        Decoders.addDecoder(clazz: DeleteQueue.self) { (source: AnyObject) -> DeleteQueue in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeleteQueue()
            instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"] as AnyObject?)
            return instance
        }


        // Decoder for [DeleteRoute]
        Decoders.addDecoder(clazz: [DeleteRoute].self) { (source: AnyObject) -> [DeleteRoute] in
            return Decoders.decode(clazz: [DeleteRoute].self, source: source)
        }
        // Decoder for DeleteRoute
        Decoders.addDecoder(clazz: DeleteRoute.self) { (source: AnyObject) -> DeleteRoute in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeleteRoute()
            instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"] as AnyObject?)
            return instance
        }


        // Decoder for [DeleteTrunk]
        Decoders.addDecoder(clazz: [DeleteTrunk].self) { (source: AnyObject) -> [DeleteTrunk] in
            return Decoders.decode(clazz: [DeleteTrunk].self, source: source)
        }
        // Decoder for DeleteTrunk
        Decoders.addDecoder(clazz: DeleteTrunk.self) { (source: AnyObject) -> DeleteTrunk in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeleteTrunk()
            instance.success = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"] as AnyObject?)
            return instance
        }


        // Decoder for [DeviceFull]
        Decoders.addDecoder(clazz: [DeviceFull].self) { (source: AnyObject) -> [DeviceFull] in
            return Decoders.decode(clazz: [DeviceFull].self, source: source)
        }
        // Decoder for DeviceFull
        Decoders.addDecoder(clazz: DeviceFull.self) { (source: AnyObject) -> DeviceFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeviceFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.sipAuthentication = Decoders.decodeOptional(clazz: SipAuthentication.self, source: sourceDictionary["sip_authentication"] as AnyObject?)
            instance.lines = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["lines"] as AnyObject?)
            return instance
        }


        // Decoder for [DeviceMembership]
        Decoders.addDecoder(clazz: [DeviceMembership].self) { (source: AnyObject) -> [DeviceMembership] in
            return Decoders.decode(clazz: [DeviceMembership].self, source: source)
        }
        // Decoder for DeviceMembership
        Decoders.addDecoder(clazz: DeviceMembership.self) { (source: AnyObject) -> DeviceMembership in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeviceMembership()
            instance.line = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["line"] as AnyObject?)
            instance.device = Decoders.decodeOptional(clazz: DeviceSummary.self, source: sourceDictionary["device"] as AnyObject?)
            return instance
        }


        // Decoder for [DeviceSummary]
        Decoders.addDecoder(clazz: [DeviceSummary].self) { (source: AnyObject) -> [DeviceSummary] in
            return Decoders.decode(clazz: [DeviceSummary].self, source: source)
        }
        // Decoder for DeviceSummary
        Decoders.addDecoder(clazz: DeviceSummary.self) { (source: AnyObject) -> DeviceSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = DeviceSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [Email]
        Decoders.addDecoder(clazz: [Email].self) { (source: AnyObject) -> [Email] in
            return Decoders.decode(clazz: [Email].self, source: source)
        }
        // Decoder for Email
        Decoders.addDecoder(clazz: Email.self) { (source: AnyObject) -> Email in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Email()
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            return instance
        }


        // Decoder for [ExpressServiceCodeFull]
        Decoders.addDecoder(clazz: [ExpressServiceCodeFull].self) { (source: AnyObject) -> [ExpressServiceCodeFull] in
            return Decoders.decode(clazz: [ExpressServiceCodeFull].self, source: source)
        }
        // Decoder for ExpressServiceCodeFull
        Decoders.addDecoder(clazz: ExpressServiceCodeFull.self) { (source: AnyObject) -> ExpressServiceCodeFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ExpressServiceCodeFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.expressServiceCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["express_service_code"] as AnyObject?)
            instance.expireDate = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expire_date"] as AnyObject?)
            return instance
        }


        // Decoder for [ExtensionFull]
        Decoders.addDecoder(clazz: [ExtensionFull].self) { (source: AnyObject) -> [ExtensionFull] in
            return Decoders.decode(clazz: [ExtensionFull].self, source: source)
        }
        // Decoder for ExtensionFull
        Decoders.addDecoder(clazz: ExtensionFull.self) { (source: AnyObject) -> ExtensionFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ExtensionFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["full_name"] as AnyObject?)
            instance.usageType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["usage_type"] as AnyObject?)
            instance.deviceMembership = Decoders.decodeOptional(clazz: DeviceMembership.self, source: sourceDictionary["device_membership"] as AnyObject?)
            instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"] as AnyObject?)
            instance.nameGreeting = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["name_greeting"] as AnyObject?)
            instance.includeInDirectory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["include_in_directory"] as AnyObject?)
            instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"] as AnyObject?)
            instance.localAreaCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["local_area_code"] as AnyObject?)
            instance.enableCallWaiting = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_call_waiting"] as AnyObject?)
            instance.enableOutboundCalls = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_outbound_calls"] as AnyObject?)
            instance.voicemail = Decoders.decodeOptional(clazz: Voicemail.self, source: sourceDictionary["voicemail"] as AnyObject?)
            instance.callNotifications = Decoders.decodeOptional(clazz: Notification.self, source: sourceDictionary["call_notifications"] as AnyObject?)
            instance.route = Decoders.decodeOptional(clazz: RouteSummary.self, source: sourceDictionary["route"] as AnyObject?)
            return instance
        }


        // Decoder for [ExtensionSummary]
        Decoders.addDecoder(clazz: [ExtensionSummary].self) { (source: AnyObject) -> [ExtensionSummary] in
            return Decoders.decode(clazz: [ExtensionSummary].self, source: source)
        }
        // Decoder for ExtensionSummary
        Decoders.addDecoder(clazz: ExtensionSummary.self) { (source: AnyObject) -> ExtensionSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ExtensionSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["extension"] as AnyObject?)
            return instance
        }


        // Decoder for [FilterCallLogs]
        Decoders.addDecoder(clazz: [FilterCallLogs].self) { (source: AnyObject) -> [FilterCallLogs] in
            return Decoders.decode(clazz: [FilterCallLogs].self, source: source)
        }
        // Decoder for FilterCallLogs
        Decoders.addDecoder(clazz: FilterCallLogs.self) { (source: AnyObject) -> FilterCallLogs in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FilterCallLogs()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_time"] as AnyObject?)
            instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_at"] as AnyObject?)
            instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"] as AnyObject?)
            instance.calledNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["called_number"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [FilterIdArray]
        Decoders.addDecoder(clazz: [FilterIdArray].self) { (source: AnyObject) -> [FilterIdArray] in
            return Decoders.decode(clazz: [FilterIdArray].self, source: source)
        }
        // Decoder for FilterIdArray
        Decoders.addDecoder(clazz: FilterIdArray.self) { (source: AnyObject) -> FilterIdArray in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FilterIdArray()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return instance
        }


        // Decoder for [FilterIdDirectionFrom]
        Decoders.addDecoder(clazz: [FilterIdDirectionFrom].self) { (source: AnyObject) -> [FilterIdDirectionFrom] in
            return Decoders.decode(clazz: [FilterIdDirectionFrom].self, source: source)
        }
        // Decoder for FilterIdDirectionFrom
        Decoders.addDecoder(clazz: FilterIdDirectionFrom.self) { (source: AnyObject) -> FilterIdDirectionFrom in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FilterIdDirectionFrom()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"] as AnyObject?)
            instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            return instance
        }


        // Decoder for [FilterIdExtensionNameArray]
        Decoders.addDecoder(clazz: [FilterIdExtensionNameArray].self) { (source: AnyObject) -> [FilterIdExtensionNameArray] in
            return Decoders.decode(clazz: [FilterIdExtensionNameArray].self, source: source)
        }
        // Decoder for FilterIdExtensionNameArray
        Decoders.addDecoder(clazz: FilterIdExtensionNameArray.self) { (source: AnyObject) -> FilterIdExtensionNameArray in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FilterIdExtensionNameArray()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [FilterIdGroupIdUpdatedAtArray]
        Decoders.addDecoder(clazz: [FilterIdGroupIdUpdatedAtArray].self) { (source: AnyObject) -> [FilterIdGroupIdUpdatedAtArray] in
            return Decoders.decode(clazz: [FilterIdGroupIdUpdatedAtArray].self, source: source)
        }
        // Decoder for FilterIdGroupIdUpdatedAtArray
        Decoders.addDecoder(clazz: FilterIdGroupIdUpdatedAtArray.self) { (source: AnyObject) -> FilterIdGroupIdUpdatedAtArray in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FilterIdGroupIdUpdatedAtArray()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.groupId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["group_id"] as AnyObject?)
            instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated_at"] as AnyObject?)
            return instance
        }


        // Decoder for [FilterIdNameArray]
        Decoders.addDecoder(clazz: [FilterIdNameArray].self) { (source: AnyObject) -> [FilterIdNameArray] in
            return Decoders.decode(clazz: [FilterIdNameArray].self, source: source)
        }
        // Decoder for FilterIdNameArray
        Decoders.addDecoder(clazz: FilterIdNameArray.self) { (source: AnyObject) -> FilterIdNameArray in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FilterIdNameArray()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [FilterIdNamePhoneNumberArray]
        Decoders.addDecoder(clazz: [FilterIdNamePhoneNumberArray].self) { (source: AnyObject) -> [FilterIdNamePhoneNumberArray] in
            return Decoders.decode(clazz: [FilterIdNamePhoneNumberArray].self, source: source)
        }
        // Decoder for FilterIdNamePhoneNumberArray
        Decoders.addDecoder(clazz: FilterIdNamePhoneNumberArray.self) { (source: AnyObject) -> FilterIdNamePhoneNumberArray in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FilterIdNamePhoneNumberArray()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            return instance
        }


        // Decoder for [FilterListAvailableNumbers]
        Decoders.addDecoder(clazz: [FilterListAvailableNumbers].self) { (source: AnyObject) -> [FilterListAvailableNumbers] in
            return Decoders.decode(clazz: [FilterListAvailableNumbers].self, source: source)
        }
        // Decoder for FilterListAvailableNumbers
        Decoders.addDecoder(clazz: FilterListAvailableNumbers.self) { (source: AnyObject) -> FilterListAvailableNumbers in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FilterListAvailableNumbers()
            instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            instance.npa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["npa"] as AnyObject?)
            instance.nxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nxx"] as AnyObject?)
            instance.xxxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["xxxx"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.province = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province"] as AnyObject?)
            instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["price"] as AnyObject?)
            instance.category = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["category"] as AnyObject?)
            return instance
        }


        // Decoder for [FilterListPhoneNumbersRegions]
        Decoders.addDecoder(clazz: [FilterListPhoneNumbersRegions].self) { (source: AnyObject) -> [FilterListPhoneNumbersRegions] in
            return Decoders.decode(clazz: [FilterListPhoneNumbersRegions].self, source: source)
        }
        // Decoder for FilterListPhoneNumbersRegions
        Decoders.addDecoder(clazz: FilterListPhoneNumbersRegions.self) { (source: AnyObject) -> FilterListPhoneNumbersRegions in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FilterListPhoneNumbersRegions()
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            instance.npa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["npa"] as AnyObject?)
            instance.nxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nxx"] as AnyObject?)
            instance.isTollFree = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_toll_free"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.provincePostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province_postal_code"] as AnyObject?)
            instance.countryPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_postal_code"] as AnyObject?)
            return instance
        }


        // Decoder for [FilterNameNumberArray]
        Decoders.addDecoder(clazz: [FilterNameNumberArray].self) { (source: AnyObject) -> [FilterNameNumberArray] in
            return Decoders.decode(clazz: [FilterNameNumberArray].self, source: source)
        }
        // Decoder for FilterNameNumberArray
        Decoders.addDecoder(clazz: FilterNameNumberArray.self) { (source: AnyObject) -> FilterNameNumberArray in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = FilterNameNumberArray()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"] as AnyObject?)
            return instance
        }


        // Decoder for [Greeting]
        Decoders.addDecoder(clazz: [Greeting].self) { (source: AnyObject) -> [Greeting] in
            return Decoders.decode(clazz: [Greeting].self, source: source)
        }
        // Decoder for Greeting
        Decoders.addDecoder(clazz: Greeting.self) { (source: AnyObject) -> Greeting in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Greeting()
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.alternate = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["alternate"] as AnyObject?)
            instance.standard = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["standard"] as AnyObject?)
            instance.enableLeaveMessagePrompt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_leave_message_prompt"] as AnyObject?)
            return instance
        }


        // Decoder for [GroupFull]
        Decoders.addDecoder(clazz: [GroupFull].self) { (source: AnyObject) -> [GroupFull] in
            return Decoders.decode(clazz: [GroupFull].self, source: source)
        }
        // Decoder for GroupFull
        Decoders.addDecoder(clazz: GroupFull.self) { (source: AnyObject) -> GroupFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = GroupFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [GroupListContacts]
        Decoders.addDecoder(clazz: [GroupListContacts].self) { (source: AnyObject) -> [GroupListContacts] in
            return Decoders.decode(clazz: [GroupListContacts].self, source: source)
        }
        // Decoder for GroupListContacts
        Decoders.addDecoder(clazz: GroupListContacts.self) { (source: AnyObject) -> GroupListContacts in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = GroupListContacts()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [GroupSummary]
        Decoders.addDecoder(clazz: [GroupSummary].self) { (source: AnyObject) -> [GroupSummary] in
            return Decoders.decode(clazz: [GroupSummary].self, source: source)
        }
        // Decoder for GroupSummary
        Decoders.addDecoder(clazz: GroupSummary.self) { (source: AnyObject) -> GroupSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = GroupSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [HoldMusic]
        Decoders.addDecoder(clazz: [HoldMusic].self) { (source: AnyObject) -> [HoldMusic] in
            return Decoders.decode(clazz: [HoldMusic].self, source: source)
        }
        // Decoder for HoldMusic
        Decoders.addDecoder(clazz: HoldMusic.self) { (source: AnyObject) -> HoldMusic in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = HoldMusic()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [Line]
        Decoders.addDecoder(clazz: [Line].self) { (source: AnyObject) -> [Line] in
            return Decoders.decode(clazz: [Line].self, source: source)
        }
        // Decoder for Line
        Decoders.addDecoder(clazz: Line.self) { (source: AnyObject) -> Line in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Line()
            instance.line = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["line"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"] as AnyObject?)
            return instance
        }


        // Decoder for [ListAccounts]
        Decoders.addDecoder(clazz: [ListAccounts].self) { (source: AnyObject) -> [ListAccounts] in
            return Decoders.decode(clazz: [ListAccounts].self, source: source)
        }
        // Decoder for ListAccounts
        Decoders.addDecoder(clazz: ListAccounts.self) { (source: AnyObject) -> ListAccounts in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListAccounts()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortId.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListApplications]
        Decoders.addDecoder(clazz: [ListApplications].self) { (source: AnyObject) -> [ListApplications] in
            return Decoders.decode(clazz: [ListApplications].self, source: source)
        }
        // Decoder for ListApplications
        Decoders.addDecoder(clazz: ListApplications.self) { (source: AnyObject) -> ListApplications in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListApplications()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListAvailableNumbers]
        Decoders.addDecoder(clazz: [ListAvailableNumbers].self) { (source: AnyObject) -> [ListAvailableNumbers] in
            return Decoders.decode(clazz: [ListAvailableNumbers].self, source: source)
        }
        // Decoder for ListAvailableNumbers
        Decoders.addDecoder(clazz: ListAvailableNumbers.self) { (source: AnyObject) -> ListAvailableNumbers in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListAvailableNumbers()
            instance.filters = Decoders.decodeOptional(clazz: FilterListAvailableNumbers.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortListAvailableNumbers.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListCallLogs]
        Decoders.addDecoder(clazz: [ListCallLogs].self) { (source: AnyObject) -> [ListCallLogs] in
            return Decoders.decode(clazz: [ListCallLogs].self, source: source)
        }
        // Decoder for ListCallLogs
        Decoders.addDecoder(clazz: ListCallLogs.self) { (source: AnyObject) -> ListCallLogs in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListCallLogs()
            instance.filters = Decoders.decodeOptional(clazz: FilterCallLogs.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortCallLogs.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListCallerIds]
        Decoders.addDecoder(clazz: [ListCallerIds].self) { (source: AnyObject) -> [ListCallerIds] in
            return Decoders.decode(clazz: [ListCallerIds].self, source: source)
        }
        // Decoder for ListCallerIds
        Decoders.addDecoder(clazz: ListCallerIds.self) { (source: AnyObject) -> ListCallerIds in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListCallerIds()
            instance.filters = Decoders.decodeOptional(clazz: FilterNameNumberArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortNameNumber.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListContacts]
        Decoders.addDecoder(clazz: [ListContacts].self) { (source: AnyObject) -> [ListContacts] in
            return Decoders.decode(clazz: [ListContacts].self, source: source)
        }
        // Decoder for ListContacts
        Decoders.addDecoder(clazz: ListContacts.self) { (source: AnyObject) -> ListContacts in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListContacts()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdGroupIdUpdatedAtArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdUpdatedAt.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListDevices]
        Decoders.addDecoder(clazz: [ListDevices].self) { (source: AnyObject) -> [ListDevices] in
            return Decoders.decode(clazz: [ListDevices].self, source: source)
        }
        // Decoder for ListDevices
        Decoders.addDecoder(clazz: ListDevices.self) { (source: AnyObject) -> ListDevices in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListDevices()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListExpressServiceCodes]
        Decoders.addDecoder(clazz: [ListExpressServiceCodes].self) { (source: AnyObject) -> [ListExpressServiceCodes] in
            return Decoders.decode(clazz: [ListExpressServiceCodes].self, source: source)
        }
        // Decoder for ListExpressServiceCodes
        Decoders.addDecoder(clazz: ListExpressServiceCodes.self) { (source: AnyObject) -> ListExpressServiceCodes in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListExpressServiceCodes()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListExtensions]
        Decoders.addDecoder(clazz: [ListExtensions].self) { (source: AnyObject) -> [ListExtensions] in
            return Decoders.decode(clazz: [ListExtensions].self, source: source)
        }
        // Decoder for ListExtensions
        Decoders.addDecoder(clazz: ListExtensions.self) { (source: AnyObject) -> ListExtensions in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListExtensions()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdExtensionNameArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdExtensionName.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListGroups]
        Decoders.addDecoder(clazz: [ListGroups].self) { (source: AnyObject) -> [ListGroups] in
            return Decoders.decode(clazz: [ListGroups].self, source: source)
        }
        // Decoder for ListGroups
        Decoders.addDecoder(clazz: ListGroups.self) { (source: AnyObject) -> ListGroups in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListGroups()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListMedia]
        Decoders.addDecoder(clazz: [ListMedia].self) { (source: AnyObject) -> [ListMedia] in
            return Decoders.decode(clazz: [ListMedia].self, source: source)
        }
        // Decoder for ListMedia
        Decoders.addDecoder(clazz: ListMedia.self) { (source: AnyObject) -> ListMedia in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListMedia()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListMenus]
        Decoders.addDecoder(clazz: [ListMenus].self) { (source: AnyObject) -> [ListMenus] in
            return Decoders.decode(clazz: [ListMenus].self, source: source)
        }
        // Decoder for ListMenus
        Decoders.addDecoder(clazz: ListMenus.self) { (source: AnyObject) -> ListMenus in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListMenus()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListPhoneNumbers]
        Decoders.addDecoder(clazz: [ListPhoneNumbers].self) { (source: AnyObject) -> [ListPhoneNumbers] in
            return Decoders.decode(clazz: [ListPhoneNumbers].self, source: source)
        }
        // Decoder for ListPhoneNumbers
        Decoders.addDecoder(clazz: ListPhoneNumbers.self) { (source: AnyObject) -> ListPhoneNumbers in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListPhoneNumbers()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdNamePhoneNumberArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdNamePhoneNumber.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListPhoneNumbersRegions]
        Decoders.addDecoder(clazz: [ListPhoneNumbersRegions].self) { (source: AnyObject) -> [ListPhoneNumbersRegions] in
            return Decoders.decode(clazz: [ListPhoneNumbersRegions].self, source: source)
        }
        // Decoder for ListPhoneNumbersRegions
        Decoders.addDecoder(clazz: ListPhoneNumbersRegions.self) { (source: AnyObject) -> ListPhoneNumbersRegions in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListPhoneNumbersRegions()
            instance.groupBy = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["group_by"] as AnyObject?)
            instance.filters = Decoders.decodeOptional(clazz: FilterListPhoneNumbersRegions.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortListPhoneNumbersRegions.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListQueues]
        Decoders.addDecoder(clazz: [ListQueues].self) { (source: AnyObject) -> [ListQueues] in
            return Decoders.decode(clazz: [ListQueues].self, source: source)
        }
        // Decoder for ListQueues
        Decoders.addDecoder(clazz: ListQueues.self) { (source: AnyObject) -> ListQueues in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListQueues()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListRoutes]
        Decoders.addDecoder(clazz: [ListRoutes].self) { (source: AnyObject) -> [ListRoutes] in
            return Decoders.decode(clazz: [ListRoutes].self, source: source)
        }
        // Decoder for ListRoutes
        Decoders.addDecoder(clazz: ListRoutes.self) { (source: AnyObject) -> ListRoutes in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListRoutes()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListSchedules]
        Decoders.addDecoder(clazz: [ListSchedules].self) { (source: AnyObject) -> [ListSchedules] in
            return Decoders.decode(clazz: [ListSchedules].self, source: source)
        }
        // Decoder for ListSchedules
        Decoders.addDecoder(clazz: ListSchedules.self) { (source: AnyObject) -> ListSchedules in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListSchedules()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListSms]
        Decoders.addDecoder(clazz: [ListSms].self) { (source: AnyObject) -> [ListSms] in
            return Decoders.decode(clazz: [ListSms].self, source: source)
        }
        // Decoder for ListSms
        Decoders.addDecoder(clazz: ListSms.self) { (source: AnyObject) -> ListSms in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListSms()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdDirectionFrom.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdCreatedAt.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [ListTrunks]
        Decoders.addDecoder(clazz: [ListTrunks].self) { (source: AnyObject) -> [ListTrunks] in
            return Decoders.decode(clazz: [ListTrunks].self, source: source)
        }
        // Decoder for ListTrunks
        Decoders.addDecoder(clazz: ListTrunks.self) { (source: AnyObject) -> ListTrunks in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ListTrunks()
            instance.filters = Decoders.decodeOptional(clazz: FilterIdNameArray.self, source: sourceDictionary["filters"] as AnyObject?)
            instance.sort = Decoders.decodeOptional(clazz: SortIdName.self, source: sourceDictionary["sort"] as AnyObject?)
            instance.total = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total"] as AnyObject?)
            instance.offset = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["offset"] as AnyObject?)
            instance.limit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["limit"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return instance
        }


        // Decoder for [MediaFull]
        Decoders.addDecoder(clazz: [MediaFull].self) { (source: AnyObject) -> [MediaFull] in
            return Decoders.decode(clazz: [MediaFull].self, source: source)
        }
        // Decoder for MediaFull
        Decoders.addDecoder(clazz: MediaFull.self) { (source: AnyObject) -> MediaFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = MediaFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return instance
        }


        // Decoder for [MediaSummary]
        Decoders.addDecoder(clazz: [MediaSummary].self) { (source: AnyObject) -> [MediaSummary] in
            return Decoders.decode(clazz: [MediaSummary].self, source: source)
        }
        // Decoder for MediaSummary
        Decoders.addDecoder(clazz: MediaSummary.self) { (source: AnyObject) -> MediaSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = MediaSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [Member]
        Decoders.addDecoder(clazz: [Member].self) { (source: AnyObject) -> [Member] in
            return Decoders.decode(clazz: [Member].self, source: source)
        }
        // Decoder for Member
        Decoders.addDecoder(clazz: Member.self) { (source: AnyObject) -> Member in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Member()
            instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            return instance
        }


        // Decoder for [MenuFull]
        Decoders.addDecoder(clazz: [MenuFull].self) { (source: AnyObject) -> [MenuFull] in
            return Decoders.decode(clazz: [MenuFull].self, source: source)
        }
        // Decoder for MenuFull
        Decoders.addDecoder(clazz: MenuFull.self) { (source: AnyObject) -> MenuFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = MenuFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.allowExtensionDial = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allow_extension_dial"] as AnyObject?)
            instance.keypressWaitTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["keypress_wait_time"] as AnyObject?)
            instance.greeting = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["greeting"] as AnyObject?)
            instance.keypressError = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["keypress_error"] as AnyObject?)
            instance.timeoutHandler = Decoders.decodeOptional(clazz: RouteSummary.self, source: sourceDictionary["timeout_handler"] as AnyObject?)
            instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"] as AnyObject?)
            return instance
        }


        // Decoder for [MenuSummary]
        Decoders.addDecoder(clazz: [MenuSummary].self) { (source: AnyObject) -> [MenuSummary] in
            return Decoders.decode(clazz: [MenuSummary].self, source: source)
        }
        // Decoder for MenuSummary
        Decoders.addDecoder(clazz: MenuSummary.self) { (source: AnyObject) -> MenuSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = MenuSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [Notification]
        Decoders.addDecoder(clazz: [Notification].self) { (source: AnyObject) -> [Notification] in
            return Decoders.decode(clazz: [Notification].self, source: source)
        }
        // Decoder for Notification
        Decoders.addDecoder(clazz: Notification.self) { (source: AnyObject) -> Notification in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Notification()
            instance.emails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["emails"] as AnyObject?)
            instance.sms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sms"] as AnyObject?)
            return instance
        }


        // Decoder for [Option]
        Decoders.addDecoder(clazz: [Option].self) { (source: AnyObject) -> [Option] in
            return Decoders.decode(clazz: [Option].self, source: source)
        }
        // Decoder for Option
        Decoders.addDecoder(clazz: Option.self) { (source: AnyObject) -> Option in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Option()
            instance.key = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["key"] as AnyObject?)
            instance.route = Decoders.decodeOptional(clazz: RouteSummary.self, source: sourceDictionary["route"] as AnyObject?)
            return instance
        }


        // Decoder for [PhoneNumberContact]
        Decoders.addDecoder(clazz: [PhoneNumberContact].self) { (source: AnyObject) -> [PhoneNumberContact] in
            return Decoders.decode(clazz: [PhoneNumberContact].self, source: source)
        }
        // Decoder for PhoneNumberContact
        Decoders.addDecoder(clazz: PhoneNumberContact.self) { (source: AnyObject) -> PhoneNumberContact in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PhoneNumberContact()
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"] as AnyObject?)
            instance.normalized = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["normalized"] as AnyObject?)
            return instance
        }


        // Decoder for [PhoneNumberFull]
        Decoders.addDecoder(clazz: [PhoneNumberFull].self) { (source: AnyObject) -> [PhoneNumberFull] in
            return Decoders.decode(clazz: [PhoneNumberFull].self, source: source)
        }
        // Decoder for PhoneNumberFull
        Decoders.addDecoder(clazz: PhoneNumberFull.self) { (source: AnyObject) -> PhoneNumberFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PhoneNumberFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            instance.blockIncoming = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_incoming"] as AnyObject?)
            instance.blockAnonymous = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_anonymous"] as AnyObject?)
            instance.route = Decoders.decodeOptional(clazz: RouteSummary.self, source: sourceDictionary["route"] as AnyObject?)
            instance.callerId = Decoders.decodeOptional(clazz: CallerIdPhoneNumber.self, source: sourceDictionary["caller_id"] as AnyObject?)
            instance.smsForwarding = Decoders.decodeOptional(clazz: SmsForwarding.self, source: sourceDictionary["sms_forwarding"] as AnyObject?)
            instance.callNotifications = Decoders.decodeOptional(clazz: CallNotifications.self, source: sourceDictionary["call_notifications"] as AnyObject?)
            return instance
        }


        // Decoder for [PhoneNumbersRegionFull]
        Decoders.addDecoder(clazz: [PhoneNumbersRegionFull].self) { (source: AnyObject) -> [PhoneNumbersRegionFull] in
            return Decoders.decode(clazz: [PhoneNumbersRegionFull].self, source: source)
        }
        // Decoder for PhoneNumbersRegionFull
        Decoders.addDecoder(clazz: PhoneNumbersRegionFull.self) { (source: AnyObject) -> PhoneNumbersRegionFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PhoneNumbersRegionFull()
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            instance.npa = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["npa"] as AnyObject?)
            instance.nxx = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nxx"] as AnyObject?)
            instance.isTollFree = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["is_toll_free"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.provincePostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province_postal_code"] as AnyObject?)
            instance.countryPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_postal_code"] as AnyObject?)
            instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"] as AnyObject?)
            return instance
        }


        // Decoder for [PingResponse]
        Decoders.addDecoder(clazz: [PingResponse].self) { (source: AnyObject) -> [PingResponse] in
            return Decoders.decode(clazz: [PingResponse].self, source: source)
        }
        // Decoder for PingResponse
        Decoders.addDecoder(clazz: PingResponse.self) { (source: AnyObject) -> PingResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = PingResponse()
            instance.datetime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["datetime"] as AnyObject?)
            instance.remoteIp = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["remote_ip"] as AnyObject?)
            instance.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"] as AnyObject?)
            instance.userAgent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["user_agent"] as AnyObject?)
            return instance
        }


        // Decoder for [QueueFull]
        Decoders.addDecoder(clazz: [QueueFull].self) { (source: AnyObject) -> [QueueFull] in
            return Decoders.decode(clazz: [QueueFull].self, source: source)
        }
        // Decoder for QueueFull
        Decoders.addDecoder(clazz: QueueFull.self) { (source: AnyObject) -> QueueFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = QueueFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.greeting = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["greeting"] as AnyObject?)
            instance.holdMusic = Decoders.decodeOptional(clazz: HoldMusic.self, source: sourceDictionary["hold_music"] as AnyObject?)
            instance.maxHoldTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_hold_time"] as AnyObject?)
            instance.callerIdType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id_type"] as AnyObject?)
            instance.ringTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["ring_time"] as AnyObject?)
            instance.members = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["members"] as AnyObject?)
            return instance
        }


        // Decoder for [QueueSummary]
        Decoders.addDecoder(clazz: [QueueSummary].self) { (source: AnyObject) -> [QueueSummary] in
            return Decoders.decode(clazz: [QueueSummary].self, source: source)
        }
        // Decoder for QueueSummary
        Decoders.addDecoder(clazz: QueueSummary.self) { (source: AnyObject) -> QueueSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = QueueSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [Recipient]
        Decoders.addDecoder(clazz: [Recipient].self) { (source: AnyObject) -> [Recipient] in
            return Decoders.decode(clazz: [Recipient].self, source: source)
        }
        // Decoder for Recipient
        Decoders.addDecoder(clazz: Recipient.self) { (source: AnyObject) -> Recipient in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Recipient()
            instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"] as AnyObject?)
            instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"] as AnyObject?)
            return instance
        }


        // Decoder for [ReplaceExtensionParams]
        Decoders.addDecoder(clazz: [ReplaceExtensionParams].self) { (source: AnyObject) -> [ReplaceExtensionParams] in
            return Decoders.decode(clazz: [ReplaceExtensionParams].self, source: source)
        }
        // Decoder for ReplaceExtensionParams
        Decoders.addDecoder(clazz: ReplaceExtensionParams.self) { (source: AnyObject) -> ReplaceExtensionParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ReplaceExtensionParams()
            instance.voicemailGreetingAlternate = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["voicemail[greeting][alternate]"] as AnyObject?)
            instance.nameGreeting = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["name_greeting"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.timezone = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["timezone"] as AnyObject?)
            instance.includeInDirectory = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["include_in_directory"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.enableOutboundCalls = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_outbound_calls"] as AnyObject?)
            instance.usageType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["usage_type"] as AnyObject?)
            instance.voicemailPassword = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["voicemail[password]"] as AnyObject?)
            instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["full_name"] as AnyObject?)
            instance.enableCallWaiting = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enable_call_waiting"] as AnyObject?)
            instance.voicemailGreetingStandard = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["voicemail[greeting][standard]"] as AnyObject?)
            instance.voicemailGreetingType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[greeting][type]"] as AnyObject?)
            instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"] as AnyObject?)
            instance.localAreaCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["local_area_code"] as AnyObject?)
            instance.voicemailEnabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["voicemail[enabled]"] as AnyObject?)
            instance.voicemailGreetingEnableLeaveMessagePrompt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["voicemail[greeting][enable_leave_message_prompt]"] as AnyObject?)
            instance.voicemailTranscription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[transcription]"] as AnyObject?)
            instance.voicemailNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["voicemail[notifications][emails]"] as AnyObject?)
            instance.voicemailNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voicemail[notifications][sms]"] as AnyObject?)
            instance.callNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["call_notifications[emails]"] as AnyObject?)
            instance.callNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_notifications[sms]"] as AnyObject?)
            instance.route = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["route"] as AnyObject?)
            return instance
        }


        // Decoder for [ReplaceMenuParams]
        Decoders.addDecoder(clazz: [ReplaceMenuParams].self) { (source: AnyObject) -> [ReplaceMenuParams] in
            return Decoders.decode(clazz: [ReplaceMenuParams].self, source: source)
        }
        // Decoder for ReplaceMenuParams
        Decoders.addDecoder(clazz: ReplaceMenuParams.self) { (source: AnyObject) -> ReplaceMenuParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ReplaceMenuParams()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.greeting = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["greeting"] as AnyObject?)
            instance.invalidKeypress = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["invalid_keypress"] as AnyObject?)
            instance.allowExtensionDial = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["allow_extension_dial"] as AnyObject?)
            instance.keypressWaitTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["keypress_wait_time"] as AnyObject?)
            instance.timeoutHandler = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["timeout_handler"] as AnyObject?)
            instance.options = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["options"] as AnyObject?)
            return instance
        }


        // Decoder for [ReplacePhoneNumberParams]
        Decoders.addDecoder(clazz: [ReplacePhoneNumberParams].self) { (source: AnyObject) -> [ReplacePhoneNumberParams] in
            return Decoders.decode(clazz: [ReplacePhoneNumberParams].self, source: source)
        }
        // Decoder for ReplacePhoneNumberParams
        Decoders.addDecoder(clazz: ReplacePhoneNumberParams.self) { (source: AnyObject) -> ReplacePhoneNumberParams in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ReplacePhoneNumberParams()
            instance.route = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["route"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.blockIncoming = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_incoming"] as AnyObject?)
            instance.blockAnonymous = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["block_anonymous"] as AnyObject?)
            instance.callerIdName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id[name]"] as AnyObject?)
            instance.callerIdType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id[type]"] as AnyObject?)
            instance.smsForwardingType = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sms_forwarding[type]"] as AnyObject?)
            instance.smsForwardingApplication = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["sms_forwarding[application]"] as AnyObject?)
            instance.smsForwardingExtension = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["sms_forwarding[extension]"] as AnyObject?)
            instance.poolItem = Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["pool_item"] as AnyObject?)
            instance.callNotificationsEmails = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["call_notifications[emails]"] as AnyObject?)
            instance.callNotificationsSms = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["call_notifications[sms]"] as AnyObject?)
            return instance
        }


        // Decoder for [RouteFull]
        Decoders.addDecoder(clazz: [RouteFull].self) { (source: AnyObject) -> [RouteFull] in
            return Decoders.decode(clazz: [RouteFull].self, source: source)
        }
        // Decoder for RouteFull
        Decoders.addDecoder(clazz: RouteFull.self) { (source: AnyObject) -> RouteFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RouteFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.rules = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["rules"] as AnyObject?)
            return instance
        }


        // Decoder for [RouteSummary]
        Decoders.addDecoder(clazz: [RouteSummary].self) { (source: AnyObject) -> [RouteSummary] in
            return Decoders.decode(clazz: [RouteSummary].self, source: source)
        }
        // Decoder for RouteSummary
        Decoders.addDecoder(clazz: RouteSummary.self) { (source: AnyObject) -> RouteSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RouteSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [RuleSet]
        Decoders.addDecoder(clazz: [RuleSet].self) { (source: AnyObject) -> [RuleSet] in
            return Decoders.decode(clazz: [RuleSet].self, source: source)
        }
        // Decoder for RuleSet
        Decoders.addDecoder(clazz: RuleSet.self) { (source: AnyObject) -> RuleSet in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RuleSet()
            instance.filter = Decoders.decodeOptional(clazz: RuleSetFilter.self, source: sourceDictionary["filter"] as AnyObject?)
            instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"] as AnyObject?)
            return instance
        }


        // Decoder for [RuleSetAction]
        Decoders.addDecoder(clazz: [RuleSetAction].self) { (source: AnyObject) -> [RuleSetAction] in
            return Decoders.decode(clazz: [RuleSetAction].self, source: source)
        }
        // Decoder for RuleSetAction
        Decoders.addDecoder(clazz: RuleSetAction.self) { (source: AnyObject) -> RuleSetAction in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RuleSetAction()
            instance.action = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["action"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            instance.timeout = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timeout"] as AnyObject?)
            instance.holdMusic = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["hold_music"] as AnyObject?)
            instance.greeting = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["greeting"] as AnyObject?)
            instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"] as AnyObject?)
            instance.menu = Decoders.decodeOptional(clazz: MenuSummary.self, source: sourceDictionary["menu"] as AnyObject?)
            instance.queue = Decoders.decodeOptional(clazz: QueueSummary.self, source: sourceDictionary["queue"] as AnyObject?)
            instance.trunk = Decoders.decodeOptional(clazz: TrunkSummary.self, source: sourceDictionary["trunk"] as AnyObject?)
            return instance
        }


        // Decoder for [RuleSetFilter]
        Decoders.addDecoder(clazz: [RuleSetFilter].self) { (source: AnyObject) -> [RuleSetFilter] in
            return Decoders.decode(clazz: [RuleSetFilter].self, source: source)
        }
        // Decoder for RuleSetFilter
        Decoders.addDecoder(clazz: RuleSetFilter.self) { (source: AnyObject) -> RuleSetFilter in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RuleSetFilter()
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance.schedule = Decoders.decodeOptional(clazz: ScheduleSummary.self, source: sourceDictionary["schedule"] as AnyObject?)
            instance.contact = Decoders.decodeOptional(clazz: ContactSummary.self, source: sourceDictionary["contact"] as AnyObject?)
            instance.group = Decoders.decodeOptional(clazz: GroupSummary.self, source: sourceDictionary["group"] as AnyObject?)
            return instance
        }


        // Decoder for [RuleSetForwardItem]
        Decoders.addDecoder(clazz: [RuleSetForwardItem].self) { (source: AnyObject) -> [RuleSetForwardItem] in
            return Decoders.decode(clazz: [RuleSetForwardItem].self, source: source)
        }
        // Decoder for RuleSetForwardItem
        Decoders.addDecoder(clazz: RuleSetForwardItem.self) { (source: AnyObject) -> RuleSetForwardItem in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = RuleSetForwardItem()
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"] as AnyObject?)
            instance.screening = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["screening"] as AnyObject?)
            instance.callerId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["caller_id"] as AnyObject?)
            instance.voiceTag = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["voice_tag"] as AnyObject?)
            instance.distinctiveRing = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["distinctive_ring"] as AnyObject?)
            return instance
        }


        // Decoder for [ScheduleFull]
        Decoders.addDecoder(clazz: [ScheduleFull].self) { (source: AnyObject) -> [ScheduleFull] in
            return Decoders.decode(clazz: [ScheduleFull].self, source: source)
        }
        // Decoder for ScheduleFull
        Decoders.addDecoder(clazz: ScheduleFull.self) { (source: AnyObject) -> ScheduleFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ScheduleFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [ScheduleSummary]
        Decoders.addDecoder(clazz: [ScheduleSummary].self) { (source: AnyObject) -> [ScheduleSummary] in
            return Decoders.decode(clazz: [ScheduleSummary].self, source: source)
        }
        // Decoder for ScheduleSummary
        Decoders.addDecoder(clazz: ScheduleSummary.self) { (source: AnyObject) -> ScheduleSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = ScheduleSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [SipAuthentication]
        Decoders.addDecoder(clazz: [SipAuthentication].self) { (source: AnyObject) -> [SipAuthentication] in
            return Decoders.decode(clazz: [SipAuthentication].self, source: source)
        }
        // Decoder for SipAuthentication
        Decoders.addDecoder(clazz: SipAuthentication.self) { (source: AnyObject) -> SipAuthentication in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SipAuthentication()
            instance.host = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["host"] as AnyObject?)
            instance.port = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["port"] as AnyObject?)
            instance.username = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?)
            instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            return instance
        }


        // Decoder for [SmsForwarding]
        Decoders.addDecoder(clazz: [SmsForwarding].self) { (source: AnyObject) -> [SmsForwarding] in
            return Decoders.decode(clazz: [SmsForwarding].self, source: source)
        }
        // Decoder for SmsForwarding
        Decoders.addDecoder(clazz: SmsForwarding.self) { (source: AnyObject) -> SmsForwarding in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SmsForwarding()
            instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: ExtensionSummary.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.application = Decoders.decodeOptional(clazz: ApplicationSummary.self, source: sourceDictionary["application"] as AnyObject?)
            return instance
        }


        // Decoder for [SmsFull]
        Decoders.addDecoder(clazz: [SmsFull].self) { (source: AnyObject) -> [SmsFull] in
            return Decoders.decode(clazz: [SmsFull].self, source: source)
        }
        // Decoder for SmsFull
        Decoders.addDecoder(clazz: SmsFull.self) { (source: AnyObject) -> SmsFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SmsFull()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.from = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from"] as AnyObject?)
            instance.to = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["to"] as AnyObject?)
            instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"] as AnyObject?)
            instance.createdEpoch = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["created_epoch"] as AnyObject?)
            instance.createdAt = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["created_at"] as AnyObject?)
            instance.text = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["text"] as AnyObject?)
            return instance
        }


        // Decoder for [SortCallLogs]
        Decoders.addDecoder(clazz: [SortCallLogs].self) { (source: AnyObject) -> [SortCallLogs] in
            return Decoders.decode(clazz: [SortCallLogs].self, source: source)
        }
        // Decoder for SortCallLogs
        Decoders.addDecoder(clazz: SortCallLogs.self) { (source: AnyObject) -> SortCallLogs in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SortCallLogs()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["start_time"] as AnyObject?)
            instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_at"] as AnyObject?)
            return instance
        }


        // Decoder for [SortId]
        Decoders.addDecoder(clazz: [SortId].self) { (source: AnyObject) -> [SortId] in
            return Decoders.decode(clazz: [SortId].self, source: source)
        }
        // Decoder for SortId
        Decoders.addDecoder(clazz: SortId.self) { (source: AnyObject) -> SortId in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SortId()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            return instance
        }


        // Decoder for [SortIdCreatedAt]
        Decoders.addDecoder(clazz: [SortIdCreatedAt].self) { (source: AnyObject) -> [SortIdCreatedAt] in
            return Decoders.decode(clazz: [SortIdCreatedAt].self, source: source)
        }
        // Decoder for SortIdCreatedAt
        Decoders.addDecoder(clazz: SortIdCreatedAt.self) { (source: AnyObject) -> SortIdCreatedAt in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SortIdCreatedAt()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created_at"] as AnyObject?)
            return instance
        }


        // Decoder for [SortIdExtensionName]
        Decoders.addDecoder(clazz: [SortIdExtensionName].self) { (source: AnyObject) -> [SortIdExtensionName] in
            return Decoders.decode(clazz: [SortIdExtensionName].self, source: source)
        }
        // Decoder for SortIdExtensionName
        Decoders.addDecoder(clazz: SortIdExtensionName.self) { (source: AnyObject) -> SortIdExtensionName in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SortIdExtensionName()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance._extension = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["extension"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [SortIdName]
        Decoders.addDecoder(clazz: [SortIdName].self) { (source: AnyObject) -> [SortIdName] in
            return Decoders.decode(clazz: [SortIdName].self, source: source)
        }
        // Decoder for SortIdName
        Decoders.addDecoder(clazz: SortIdName.self) { (source: AnyObject) -> SortIdName in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SortIdName()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [SortIdNamePhoneNumber]
        Decoders.addDecoder(clazz: [SortIdNamePhoneNumber].self) { (source: AnyObject) -> [SortIdNamePhoneNumber] in
            return Decoders.decode(clazz: [SortIdNamePhoneNumber].self, source: source)
        }
        // Decoder for SortIdNamePhoneNumber
        Decoders.addDecoder(clazz: SortIdNamePhoneNumber.self) { (source: AnyObject) -> SortIdNamePhoneNumber in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SortIdNamePhoneNumber()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            return instance
        }


        // Decoder for [SortIdUpdatedAt]
        Decoders.addDecoder(clazz: [SortIdUpdatedAt].self) { (source: AnyObject) -> [SortIdUpdatedAt] in
            return Decoders.decode(clazz: [SortIdUpdatedAt].self, source: source)
        }
        // Decoder for SortIdUpdatedAt
        Decoders.addDecoder(clazz: SortIdUpdatedAt.self) { (source: AnyObject) -> SortIdUpdatedAt in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SortIdUpdatedAt()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.updatedAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updated_at"] as AnyObject?)
            return instance
        }


        // Decoder for [SortListAvailableNumbers]
        Decoders.addDecoder(clazz: [SortListAvailableNumbers].self) { (source: AnyObject) -> [SortListAvailableNumbers] in
            return Decoders.decode(clazz: [SortListAvailableNumbers].self, source: source)
        }
        // Decoder for SortListAvailableNumbers
        Decoders.addDecoder(clazz: SortListAvailableNumbers.self) { (source: AnyObject) -> SortListAvailableNumbers in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SortListAvailableNumbers()
            instance._internal = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["internal"] as AnyObject?)
            instance.price = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["price"] as AnyObject?)
            instance.phoneNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["phone_number"] as AnyObject?)
            return instance
        }


        // Decoder for [SortListPhoneNumbersRegions]
        Decoders.addDecoder(clazz: [SortListPhoneNumbersRegions].self) { (source: AnyObject) -> [SortListPhoneNumbersRegions] in
            return Decoders.decode(clazz: [SortListPhoneNumbersRegions].self, source: source)
        }
        // Decoder for SortListPhoneNumbersRegions
        Decoders.addDecoder(clazz: SortListPhoneNumbersRegions.self) { (source: AnyObject) -> SortListPhoneNumbersRegions in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SortListPhoneNumbersRegions()
            instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"] as AnyObject?)
            instance.npa = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["npa"] as AnyObject?)
            instance.nxx = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nxx"] as AnyObject?)
            instance.isTollFree = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["is_toll_free"] as AnyObject?)
            instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"] as AnyObject?)
            instance.provincePostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["province_postal_code"] as AnyObject?)
            instance.countryPostalCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_postal_code"] as AnyObject?)
            return instance
        }


        // Decoder for [SortNameNumber]
        Decoders.addDecoder(clazz: [SortNameNumber].self) { (source: AnyObject) -> [SortNameNumber] in
            return Decoders.decode(clazz: [SortNameNumber].self, source: source)
        }
        // Decoder for SortNameNumber
        Decoders.addDecoder(clazz: SortNameNumber.self) { (source: AnyObject) -> SortNameNumber in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = SortNameNumber()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.number = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["number"] as AnyObject?)
            return instance
        }


        // Decoder for [TrunkFull]
        Decoders.addDecoder(clazz: [TrunkFull].self) { (source: AnyObject) -> [TrunkFull] in
            return Decoders.decode(clazz: [TrunkFull].self, source: source)
        }
        // Decoder for TrunkFull
        Decoders.addDecoder(clazz: TrunkFull.self) { (source: AnyObject) -> TrunkFull in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TrunkFull()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.uri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?)
            instance.maxConcurrentCalls = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_concurrent_calls"] as AnyObject?)
            instance.maxMinutesPerMonth = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_minutes_per_month"] as AnyObject?)
            instance.greeting = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["greeting"] as AnyObject?)
            instance.errorMessage = Decoders.decodeOptional(clazz: MediaSummary.self, source: sourceDictionary["error_message"] as AnyObject?)
            instance.codecs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["codecs"] as AnyObject?)
            return instance
        }


        // Decoder for [TrunkSummary]
        Decoders.addDecoder(clazz: [TrunkSummary].self) { (source: AnyObject) -> [TrunkSummary] in
            return Decoders.decode(clazz: [TrunkSummary].self, source: source)
        }
        // Decoder for TrunkSummary
        Decoders.addDecoder(clazz: TrunkSummary.self) { (source: AnyObject) -> TrunkSummary in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = TrunkSummary()
            instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return instance
        }


        // Decoder for [Voicemail]
        Decoders.addDecoder(clazz: [Voicemail].self) { (source: AnyObject) -> [Voicemail] in
            return Decoders.decode(clazz: [Voicemail].self, source: source)
        }
        // Decoder for Voicemail
        Decoders.addDecoder(clazz: Voicemail.self) { (source: AnyObject) -> Voicemail in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Voicemail()
            instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"] as AnyObject?)
            instance.password = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["password"] as AnyObject?)
            instance.greeting = Decoders.decodeOptional(clazz: Greeting.self, source: sourceDictionary["greeting"] as AnyObject?)
            instance.attachments = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["attachments"] as AnyObject?)
            instance.notifications = Decoders.decodeOptional(clazz: Notification.self, source: sourceDictionary["notifications"] as AnyObject?)
            instance.transcription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["transcription"] as AnyObject?)
            return instance
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
